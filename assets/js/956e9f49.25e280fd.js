"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7104],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[d]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={title:"Exceptions"},i=void 0,p={unversionedId:"optional-components/exceptions",id:"version-9.x/optional-components/exceptions",title:"Exceptions",description:"* Definition",source:"@site/versioned_docs/version-9.x/optional-components/exceptions.md",sourceDirName:"optional-components",slug:"/optional-components/exceptions",permalink:"/docs/9.x/optional-components/exceptions",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/exceptions.md",tags:[],version:"9.x",lastUpdatedBy:"Mohammad Alavi",lastUpdatedAt:1691839128,formattedLastUpdatedAt:"Aug 12, 2023",frontMatter:{title:"Exceptions"},sidebar:"version-9.x/docs",previous:{title:"Repositories",permalink:"/docs/9.x/optional-components/repositories"},next:{title:"Criterias",permalink:"/docs/9.x/optional-components/criterias"}},l={},s=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"Application Error Codes",id:"application-error-codes",level:3},{value:"Linking Exceptions and Error Codes",id:"linking-exceptions-and-error-codes",level:4},{value:"Defining Own Error Code Tables",id:"defining-own-error-code-tables",level:4}],c={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#definition"},"Definition")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#principles"},"Principles")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rules"},"Rules")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#application-error-codes"},"Application Error Codes"))),(0,r.kt)("h3",{id:"definition"},"Definition"),(0,r.kt)("p",null,"Exceptions are classes the handles errors, and helps developers debug their code in a more efficient way."),(0,r.kt)("h3",{id:"principles"},"Principles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Exceptions can be thrown from anywhere in the application."),(0,r.kt)("li",{parentName:"ul"},"Exceptions SHOULD be created inside the Containers. However, general Exceptions CAN be created in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Ship")," layer.")),(0,r.kt)("h3",{id:"rules"},"Rules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All Exceptions MUST extend ",(0,r.kt)("inlineCode",{parentName:"li"},"App\\Ship\\Parents\\Exceptions\\Exception"),"."),(0,r.kt)("li",{parentName:"ul"},"Shared (general) Exceptions between all Containers SHOULD be created in the ",(0,r.kt)("strong",{parentName:"li"},"Exceptions Ship")," folder (",(0,r.kt)("inlineCode",{parentName:"li"},"app/Ship/Exceptions/*"),")."),(0,r.kt)("li",{parentName:"ul"},"Every Exception SHOULD have two properties ",(0,r.kt)("inlineCode",{parentName:"li"},"httpStatusCode")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"message"),", both properties will be displayed when an error occurs. You can override those values while throwing the error.")),(0,r.kt)("h3",{id:"folder-structure"},"Folder Structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," - App\n    - Containers\n        - {container-name}\n            - Exceptions\n                - AccountFailedException.php\n                - ...\n\n    - Ship\n        - Exceptions\n            - IncorrectIdException.php\n            - InternalErrorException.php\n            - ...\n")),(0,r.kt)("h3",{id:"code-samples"},"Code Samples"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"User ",(0,r.kt)("inlineCode",{parentName:"strong"},"Exception"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\User\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AccountFailedException extends Exception\n{\n    public $httpStatusCode = Response::HTTP_CONFLICT;\n\n    public $message = 'Failed creating new User.';\n    \n    public $code = 4711;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"General ",(0,r.kt)("inlineCode",{parentName:"strong"},"Exception"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Ship\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response as SymfonyResponse;\n\nclass InternalErrorException extends Exception\n{\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"General ",(0,r.kt)("inlineCode",{parentName:"strong"},"Exception")," with CustomData:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Ship\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response as SymfonyResponse;\n\nclass AwesomeExceptionWithCustomData extends Exception\n{\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n    \n    public $code = 1234;\n    \n    /*\n     * Everything you add here will be automatically added to the ExceptionFormatter on the top level!\n     * You can define any structure you want or maybe include translated messages\n     */\n    public function addCustomData() {\n        return [\n            'title' => 'nice',\n            'description' => 'one fancy description here',\n            'foo' => true,\n            'meta' => [\n                'bar' => 1234,\n            ]\n        ];\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exception usage from anywhere:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nthrow new AccountFailedException();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage with Log for Debugging:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nthrow (new AccountFailedException())->debug($e); // debug() accepts string or \\Exception instance\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage and overriding the default ",(0,r.kt)("inlineCode",{parentName:"strong"},"message"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nthrow new AccountFailedException('I am the message to be displayed for the user');\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Usage and overwriting pre-set CustomData")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nthrow (new AwesomeExceptionWithCustomData())->overrideCustomData(['foo' => 'bar']);\n\n")),(0,r.kt)("h3",{id:"application-error-codes"},"Application Error Codes"),(0,r.kt)("p",null,"Apiato provides a convenient way to manage all ",(0,r.kt)("inlineCode",{parentName:"p"},"application error codes")," in one central place. Therefore, Apiato provides, amongst others, the ",(0,r.kt)("inlineCode",{parentName:"p"},"\\App\\Ship\\Exceptions\\Codes\\ApplicationErrorCodesTable")," class, which already holds various information for multiple errors."),(0,r.kt)("p",null,"Thereby, one error look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"const BASE_GENERAL_ERROR = [\n    'code' => 1001,\n    'title' => 'Unknown / Unspecified Error.',\n    'description' => 'Something unexpected happened.',\n];\n")),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"code")," is used to be sent back to the client. The ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", however, can be used to automatically generate a documentation regarding all defined error codes and their meaning. Please note that this feature is currently not implemented but will be added later on."),(0,r.kt)("h4",{id:"linking-exceptions-and-error-codes"},"Linking Exceptions and Error Codes"),(0,r.kt)("p",null,"In order to link an ",(0,r.kt)("inlineCode",{parentName:"p"},"error code")," to an ",(0,r.kt)("inlineCode",{parentName:"p"},"Exception"),", you simply need override the ",(0,r.kt)("inlineCode",{parentName:"p"},"useErrorCode()")," method of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Exception"),"."),(0,r.kt)("p",null,"Consider the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"class InternalErrorException extends Exception\n{\n\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n    \n    public code = 4711; // this code will be overwritten by the useErrorCode() method!\n\n    public function useErrorCode()\n    {\n        return ApplicationErrorCodes::BASE_INTERNAL_ERROR;\n    }\n}\n")),(0,r.kt)("p",null,"Please note that already defined ",(0,r.kt)("inlineCode",{parentName:"p"},"$code")," values may be overwritten by the ",(0,r.kt)("inlineCode",{parentName:"p"},"useErrorCode()")," method! Furthermore, this feature is completely optional - you may still use the known ",(0,r.kt)("inlineCode",{parentName:"p"},"public $code = 4711;")," approach to manually set an error code."),(0,r.kt)("h4",{id:"defining-own-error-code-tables"},"Defining Own Error Code Tables"),(0,r.kt)("p",null,"Of course, Apiato allows you to define your own ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomErrorCodesTable"),". In fact, there already exists such a file where you can define your own error codes. Please note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplicationErrorCodesTable")," may be adapted by Apiato - the others will not."),(0,r.kt)("p",null,"If you like to split the errors in various files, you can easily create a ",(0,r.kt)("inlineCode",{parentName:"p"},"UserErrorCodesTable"),' in respective namespace and define the errors accordingly. However, you need to manually "register" this code table. This can be achieved in the ',(0,r.kt)("inlineCode",{parentName:"p"},"ErrorCodeManager::getCodeTables()")," method."),(0,r.kt)("p",null,"Now you can easily use your ",(0,r.kt)("inlineCode",{parentName:"p"},"UserErrorCodesTable::USER_NOT_VERIFIED")," error in your ",(0,r.kt)("inlineCode",{parentName:"p"},"Exception")," class."))}u.isMDXComponent=!0}}]);