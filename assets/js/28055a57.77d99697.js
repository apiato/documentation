"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[7994],{26521:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=s(74848),t=s(28453);const i={title:"Factories"},o=void 0,a={id:"optional-components/factories",title:"Factories",description:"* Definition",source:"@site/versioned_docs/version-11.x/optional-components/factories.md",sourceDirName:"optional-components",slug:"/optional-components/factories",permalink:"/docs/11.x/optional-components/factories",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/optional-components/factories.md",tags:[],version:"11.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1659346629e3,frontMatter:{title:"Factories"},sidebar:"docs",previous:{title:"Seeders",permalink:"/docs/11.x/optional-components/seeders"},next:{title:"Middlewares",permalink:"/docs/11.x/optional-components/middlewares"}},l={},c=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"A User Model Factory",id:"a-user-model-factory",level:4},{value:"Usage from Tests or Anywhere Else",id:"usage-from-tests-or-anywhere-else",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#definition",children:"Definition"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#code-samples",children:"Code Samples"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,r.jsx)(n.p,{children:"Factories (are a short name for Model Factories)."}),"\n",(0,r.jsx)(n.p,{children:"Factories are used to generate some fake data with the help of Faker to be used for testing purposes."}),"\n",(0,r.jsx)(n.p,{children:"Factories are mainly used from Tests."}),"\n",(0,r.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Factories SHOULD be created in the Containers."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["All Factories MUST extend from ",(0,r.jsx)(n.code,{children:"App\\Ship\\Parents\\Factories\\Factory"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:" - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                 - Data\n                    - Factories\n                        - UserFactory.php\n                        - ...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"code-samples",children:"Code Samples"}),"\n",(0,r.jsx)(n.h4,{id:"a-user-model-factory",children:"A User Model Factory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class UserFactory extends Factory\n{\n    protected $model = User::class;\n\n    public function definition(): array\n    {\n        static $password;\n\n        return [\n            'name' => $this->faker->name,\n            'email' => $this->faker->unique()->safeEmail,\n            'password' => $password ?: $password = Hash::make('testing-password'),\n            'email_verified_at' => now(),\n            'remember_token' => Str::random(10),\n            'is_admin' => false,\n        ];\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"usage-from-tests-or-anywhere-else",children:"Usage from Tests or Anywhere Else"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// creating 4 users\nUser::factory()->count(4)->create();\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Further reading",type:"info",children:(0,r.jsxs)(n.p,{children:["More info at ",(0,r.jsx)(n.a,{href:"https://laravel.com/docs/database-testing#defining-model-factories",children:"Laravel Docs"}),"."]})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);