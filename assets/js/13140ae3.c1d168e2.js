"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[6105],{24098:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"optional-components/tests","title":"Tests","description":"* Definition","source":"@site/versioned_docs/version-11.x/optional-components/tests.md","sourceDirName":"optional-components","slug":"/optional-components/tests","permalink":"/docs/11.x/optional-components/tests","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/optional-components/tests.md","tags":[],"version":"11.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1659346629000,"frontMatter":{"title":"Tests"},"sidebar":"docs","previous":{"title":"Criterias","permalink":"/docs/11.x/optional-components/criterias"},"next":{"title":"Migrations","permalink":"/docs/11.x/optional-components/migrations"}}');var i=s(74848),o=s(28453);const r={title:"Tests"},l=void 0,a={},c=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Sample",id:"code-sample",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#definition",children:"Definition"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#code-sample",children:"Code Sample"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.p,{children:"Tests classes are created to test if the Application classes are working as expected."}),"\n",(0,i.jsx)(n.p,{children:"The two most essential Test types for this architecture are the Unit Tests and the Functional Tests. However, Integration and Acceptance Tests can be used as well."}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Containers MAY be covered by all types of Tests."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use Functional Tests to test Container Routes are doing what's expected from them."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use Unit Tests to test Container Actions and Tasks are doing what's expected from them."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All Container Test classes SHOULD extend from a Container Internal TestCase class ",(0,i.jsx)(n.code,{children:"{container-name}/Tests/TestCase.php"}),". The container ",(0,i.jsx)(n.strong,{children:"TestCase"})," MUST extend main TestCase on Ship layer ",(0,i.jsx)(n.code,{children:"App\\Ship\\Parents\\Tests\\PhpUnit\\TestCase"}),". ",(0,i.jsx)(n.em,{children:"(Adding functions to the container TestCase allows sharing those functions between all Test classes of the Container)"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - Tests\n                    - TestCase.php // the container test case\n                    - Unit\n                        - CreateUserTest.php\n                        - UpdateUserTest.php\n                        - ...\n                - UI\n                    - API\n                        - Tests\n                            - Functional\n                                - LoginTest.php\n                                - LogoutTest.php\n                                - ...\n                    - WEB\n                        - Tests\n                            - Functional\n                                - LoginTest.php\n                                - LogoutTest.php\n                                - ...\n                    - CLI\n                        - Tests\n                            - Functional\n                                - BackupDataTest.php\n                                - ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"code-sample",children:"Code Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class DeleteUserTest extends TestCase\n{\n    protected $endpoint = 'delete@v1/users/{id}';\n    \n    protected array $access = [\n        'roles' => '',\n        'permissions' => 'delete-users',\n    ];\n    \n    public function testDeleteExistingUser()\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertStatus(204);\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"../miscellaneous/tests-helpers",children:"Tests Helpers"})," Page"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);