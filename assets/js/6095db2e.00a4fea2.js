"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8962],{15680:(e,n,a)=>{a.d(n,{xA:()=>u,yg:()=>g});var t=a(96540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},u=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(a),d=i,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return a?t.createElement(g,r(r({ref:n},u),{},{components:a})):t.createElement(g,r({ref:n},u))}));function g(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},95897:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=a(58168),i=(a(96540),a(15680));const l={title:"Mails"},r=void 0,o={unversionedId:"optional-components/mails",id:"version-10.x/optional-components/mails",title:"Mails",description:"* Definition",source:"@site/versioned_docs/version-10.x/optional-components/mails.md",sourceDirName:"optional-components",slug:"/optional-components/mails",permalink:"/docs/10.x/optional-components/mails",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-10.x/optional-components/mails.md",tags:[],version:"10.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1619394104,formattedLastUpdatedAt:"Apr 25, 2021",frontMatter:{title:"Mails"},sidebar:"version-10.x/docs",previous:{title:"Events",permalink:"/docs/10.x/optional-components/events"},next:{title:"Notifications",permalink:"/docs/10.x/optional-components/notifications"}},p={},s=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"A simple Mail",id:"a-simple-mail",level:4},{value:"Usage from an Action",id:"usage-from-an-action",level:4},{value:"Email Templates",id:"email-templates",level:2},{value:"Configure Emails",id:"configure-emails",level:2},{value:"Queueing A Notification",id:"queueing",level:2}],u={toc:s},m="wrapper";function c(e){let{components:n,...a}=e;return(0,i.yg)(m,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#definition"},"Definition")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#principles"},"Principles")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#rules"},"Rules")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#email-templates"},"Email Templates")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#configure-emails"},"Configure Emails")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#queueing"},"Queueing"))),(0,i.yg)("h3",{id:"definition"},"Definition"),(0,i.yg)("p",null,"The Mail component allows you to describe an email and send it whenever needed. "),(0,i.yg)("h3",{id:"principles"},"Principles"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Containers MAY or MAY NOT have one or more Mail.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Ship may contain general Mails."))),(0,i.yg)("h3",{id:"rules"},"Rules"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"All Notifications MUST extend from ",(0,i.yg)("inlineCode",{parentName:"li"},"App\\Ship\\Parents\\Mails\\Mail"),"."),(0,i.yg)("li",{parentName:"ul"},"Email Templates must be placed inside the Mail directory in a Templates directory ",(0,i.yg)("inlineCode",{parentName:"li"},"app/Containers/{section}/{container}/Mails/Templates"),".")),(0,i.yg)("h3",{id:"folder-structure"},"Folder Structure"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"- app\n  - Containers\n    - {section-name}\n      - {container-name}\n        - Mails\n          - UserRegisteredMail.php\n          - ...\n          - Templates\n            - user-registered.blade.php\n            - ...\n- Ship\n  - Mails\n    - SomeMail.php\n    - ...\n    - Templates\n      - some-template.blade.php\n      - ...\n")),(0,i.yg)("h3",{id:"code-samples"},"Code Samples"),(0,i.yg)("h4",{id:"a-simple-mail"},"A simple Mail"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"class UserRegisteredMail extends Mail implements ShouldQueue\n{\n    use Queueable;\n\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function build()\n    {\n        return $this->view('appSection@user::user-registered')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n")),(0,i.yg)("h4",{id:"usage-from-an-action"},"Usage from an Action"),(0,i.yg)("p",null,"Notifications can be sent from Actions or Tasks using the ",(0,i.yg)("inlineCode",{parentName:"p"},"Mail")," Facade."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"Mail::send(new UserRegisteredMail($user));\n")),(0,i.yg)("h2",{id:"email-templates"},"Email Templates"),(0,i.yg)("p",null,"Templates should be placed inside a folder ",(0,i.yg)("inlineCode",{parentName:"p"},"Templates")," inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"Mail")," folder."),(0,i.yg)("p",null,"To access a Mail template ",(0,i.yg)("em",{parentName:"p"},"(same like accessing a web view)")," you must call the camelCase of its Section name + ",(0,i.yg)("inlineCode",{parentName:"p"},"@")," + camelCase of its Container name.   "),(0,i.yg)("p",null,"In the example below we're using the ",(0,i.yg)("inlineCode",{parentName:"p"},"user-registered.blade.php")," template in the ",(0,i.yg)("inlineCode",{parentName:"p"},"AppSection")," Section > ",(0,i.yg)("inlineCode",{parentName:"p"},"User")," Container."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"$this->view('appSection@user::user-registered');\n")),(0,i.yg)("h2",{id:"configure-emails"},"Configure Emails"),(0,i.yg)("p",null,"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},".env")," file and set the ",(0,i.yg)("inlineCode",{parentName:"p"},"from")," mail and address. This will be used globally whenever the ",(0,i.yg)("inlineCode",{parentName:"p"},"from")," function is not called in the Mail. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-env"},'MAIL_FROM_ADDRESS=test@test.test\nMAIL_FROM_NAME="apiato"\n')),(0,i.yg)("p",null,"To use different email address in some classes add ",(0,i.yg)("inlineCode",{parentName:"p"},"->to($this->email, $this->name)")," to the ",(0,i.yg)("inlineCode",{parentName:"p"},"build")," function in your Mail class. "),(0,i.yg)("p",null,"By default Apiato is configured to use Log Driver ",(0,i.yg)("inlineCode",{parentName:"p"},"MAIL_DRIVER=log"),", you can change that from the ",(0,i.yg)("inlineCode",{parentName:"p"},".env")," file."),(0,i.yg)("h2",{id:"queueing"},"Queueing A Notification"),(0,i.yg)("p",null,"To queue a notification you should use ",(0,i.yg)("inlineCode",{parentName:"p"},"Illuminate\\Bus\\Queueable")," and implement ",(0,i.yg)("inlineCode",{parentName:"p"},"Illuminate\\Contracts\\Queue\\ShouldQueue"),"."),(0,i.yg)("admonition",{title:"Further reading",type:"info"},(0,i.yg)("p",{parentName:"admonition"},"More info at ",(0,i.yg)("a",{parentName:"p",href:"https://laravel.com/docs/mail"},"Laravel Docs"),".")))}c.isMDXComponent=!0}}]);