"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[4680],{72710:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=r(74848),i=r(28453);const t={title:"Transformers"},o=void 0,l={id:"main-components/transformers",title:"Transformers",description:"* Definition & Principles",source:"@site/versioned_docs/version-11.x/main-components/transformers.md",sourceDirName:"main-components",slug:"/main-components/transformers",permalink:"/docs/11.x/main-components/transformers",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/main-components/transformers.md",tags:[],version:"11.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1659346629e3,frontMatter:{title:"Transformers"},sidebar:"docs",previous:{title:"Views",permalink:"/docs/11.x/main-components/views"},next:{title:"Exceptions",permalink:"/docs/11.x/main-components/exceptions"}},a={},c=[{value:"Definition &amp; Principles",id:"definition-principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"Reward Transformer with Country relation",id:"reward-transformer-with-country-relation",level:4},{value:"Usage from Controller (Single Item)",id:"usage-from-controller-single-item",level:4},{value:"Relationships (include)",id:"relationships-include",level:3},{value:"From Front-end",id:"from-front-end",level:4},{value:"From Back-end",id:"from-back-end",level:4},{value:"Transformer Available helper functions:",id:"transformer-available-helper-functions",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#definition-principles",children:"Definition & Principles"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#code-samples",children:"Code Samples"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#relationships-include",children:"Relationships (include)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#from-front-end",children:"From Front-end"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#from-back-end",children:"From Back-end"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#transformer-available-helper-functions",children:"Transformer Available helper functions:"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"definition-principles",children:"Definition & Principles"}),"\n",(0,s.jsxs)(n.p,{children:["Read ",(0,s.jsx)(n.a,{href:"https://github.com/Mahmoudz/Porto#Transformers",children:(0,s.jsx)(n.strong,{children:"Porto SAP Documentation (#Transformers)"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"All API responses MUST be formatted via a Transformer."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Every Transformer SHOULD extend from ",(0,s.jsx)(n.code,{children:"App\\Ship\\Parents\\Transformers\\Transformer"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Each Transformer MUST have a ",(0,s.jsx)(n.code,{children:"transform()"})," function."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:" - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - UI\n                    - API\n                        - Transformers\n                            - UserTransformer.php\n                            - ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"code-samples",children:"Code Samples"}),"\n",(0,s.jsx)(n.h4,{id:"reward-transformer-with-country-relation",children:"Reward Transformer with Country relation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class ItemTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'images',\n    ];\n\n    protected $defaultIncludes = [\n        'roles',\n    ];\n\n    public function transform(Item $item)\n    {\n        $response = [\n            'object'      => $item->getResourceKey(),\n            'id'          => $item->getHashedKey(),\n            'name'        => $item->name,\n            'description' => $item->description,\n            'price'       => (float)$item->price,\n            'weight'      => (float)$item->weight,\n            'created_at'  => $item->created_at,\n            'updated_at'  => $item->updated_at,\n            'readable_created_at' => $item->created_at->diffForHumans(),\n            'readable_updated_at' => $item->updated_at->diffForHumans(),\n        ];\n\n        // add more or modify data for Admins only\n        $response = $this->ifAdmin([\n            'real_id'    => $item->id,\n            'deleted_at' => $item->deleted_at,\n        ], $response);\n\n        return $response;\n    }\n\n    public function includeImages(Item $item)\n    {\n        return $this->collection($item->images, new ItemImageTransformer());\n    }\n\n    public function includeRoles(User $user)\n    {\n        return $this->collection($user->roles, new RoleTransformer());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"usage-from-controller-single-item",children:"Usage from Controller (Single Item)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$user = $this->getUser();\n\n$this->transform($user, UserTransformer::class);\n\n// more options are available\n"})}),"\n",(0,s.jsx)(n.h3,{id:"relationships-include",children:"Relationships (include)"}),"\n",(0,s.jsx)(n.p,{children:"Loading relationships in Transformer (calling other Transformers):"}),"\n",(0,s.jsx)(n.p,{children:"This can be done in 2 ways:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"By the User, he can specify what relations to return in response."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"By the Developer, define what relations to include at run time."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"from-front-end",children:"From Front-end"}),"\n",(0,s.jsxs)(n.p,{children:["You can request data with their relationships directly from the API call using ",(0,s.jsx)(n.code,{children:"include=tags,user"})," but first the Transformer need to have the ",(0,s.jsx)(n.code,{children:"availableIncludes"})," defined with their functions like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class AccountTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'tags',\n        'user',\n    ];\n\n    public function transform(Account $account)\n    {\n        return [\n            'id'       => (int)$account->id,\n            'url'      => $account->url,\n            'username' => $account->username,\n            'secret'   => $account->secret,\n            'note'     => $account->note,\n        ];\n    }\n\n    public function includeTags(Account $account)\n    {\n        // use collection with `multi` relationship\n        return $this->collection($account->tags, new TagTransformer());\n    }\n\n    public function includeUser(Account $account)\n    {\n        // use `item` with single relationship\n        return $this->item($account->user, new UserTransformer());\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now to get the ",(0,s.jsx)(n.code,{children:"Tags"})," with the response when Accounts are requested pass the ",(0,s.jsx)(n.code,{children:"?include=tags"})," parameter with the [GET] request."]}),"\n",(0,s.jsxs)(n.p,{children:["To get Tags with User use the comma separator: ",(0,s.jsx)(n.code,{children:"?include=tags,user"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"from-back-end",children:"From Back-end"}),"\n",(0,s.jsxs)(n.p,{children:["From the controller you can dynamically set the ",(0,s.jsx)(n.code,{children:"DefaultInclude"})," using (",(0,s.jsx)(n.code,{children:"setDefaultIncludes"}),") anytime you want."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"return $this->transform($rewards, ProductsTransformer::class)->setDefaultIncludes(['tags']);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You need to have ",(0,s.jsx)(n.code,{children:"includeTags"})," function defined on the transformer. Look at the full examples above."]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to include a relation with every response from this transformer you can define the relation directly in the transformer on (",(0,s.jsx)(n.code,{children:"$defaultIncludes"}),")"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"protected $availableIncludes = [\n    'users',\n];\n\nprotected $defaultIncludes = [\n    'tags',\n];\n\n// ..\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You need to have ",(0,s.jsx)(n.code,{children:"includeUser"})," and ",(0,s.jsx)(n.code,{children:"includeTags"})," functions defined on the transformer. Look at the full examples above."]}),"\n",(0,s.jsx)(n.h2,{id:"transformer-available-helper-functions",children:"Transformer Available helper functions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"user()"}),": returns current authenticated user object."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ifAdmin($adminResponse, $clientResponse)"}),": merges normal client response with the admin extra or modified results, when current authenticated user is Admin. Look at the full examples above."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"nullableItem($model->something, new SomethingTransformer())"}),": it is a shorthand for"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"$model->something ? $this->item($model->something, new SomethingTransformer()) : $this->primitive(null)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For more information about the Transformers read ",(0,s.jsx)(n.a,{href:"http://fractal.thephpleague.com/transformers/",children:"this"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(96540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);