"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[1508],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var i=s(96540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},66494:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"main-components/actions","title":"Actions","description":"- Definition & Principles","source":"@site/versioned_docs/version-11.x/main-components/actions.md","sourceDirName":"main-components","slug":"/main-components/actions","permalink":"/docs/11.x/main-components/actions","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/main-components/actions.md","tags":[],"version":"11.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1659346629000,"frontMatter":{"title":"Actions"},"sidebar":"docs","previous":{"title":"Requests","permalink":"/docs/11.x/main-components/requests"},"next":{"title":"Tasks","permalink":"/docs/11.x/main-components/tasks"}}');var t=s(74848),a=s(28453);const o={title:"Actions"},r=void 0,l={},c=[{value:"Definition &amp; Principles",id:"definition-principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Sample",id:"code-sample",level:3},{value:"Action",id:"action",level:4},{value:"Calling multiple Tasks",id:"calling-multiple-tasks",level:4},{value:"Usage from a Controller",id:"usage-from-a-controller",level:4},{value:"Transactional Run",id:"transactional-run",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#definition-principles",children:"Definition & Principles"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#code-sample",children:"Code Sample"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#transactional-run",children:"Transactional Run"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"definition-principles",children:"Definition & Principles"}),"\n",(0,t.jsxs)(n.p,{children:["Read ",(0,t.jsx)(n.a,{href:"https://github.com/Mahmoudz/Porto#Actions",children:(0,t.jsx)(n.strong,{children:"Porto SAP Documentation (#Actions)"})}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All Actions MUST extend ",(0,t.jsx)(n.code,{children:"App\\Ship\\Parents\\Actions\\Action"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:" - app\n    - Containers\n        - {section-name}\n            - {container-name}\n                - Actions\n                    - CreateUserAction.php\n                    - DeleteUserAction.php\n                    - ...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"code-sample",children:"Code Sample"}),"\n",(0,t.jsx)(n.h4,{id:"action",children:"Action"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"class CreateAdminAction extends Action\n{\n    public function run(string $email, string $password, string $name, bool $isClient = false): User\n    {\n        $admin = app(CreateUserByCredentialsTask::class)->run(\n            $isClient,\n            $email,\n            $password,\n            $name\n        );\n\n        app(AssignUserToRoleTask::class)->run($admin, ['admin']);\n\n        return $admin;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"calling-multiple-tasks",children:"Calling multiple Tasks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"class DemoAction extends Action\n{\n    public function run($xxx, $yyy, $zzz)\n    {\n        $foo = app(Sample111Task::class)->run($xxx, $yyy);\n        $bar = app(Sample222Task::class)->run($zzz);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"usage-from-a-controller",children:"Usage from a Controller"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"    public function deleteUser(DeleteUserRequest $request)\n    {\n        $user = app(DeleteUserAction::class)->run($request);\n        return $this->deleted($user);\n    }\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"The same Action MAY be called by multiple Controllers (Web, Api, Cli)."})}),"\n",(0,t.jsx)(n.h3,{id:"transactional-run",children:"Transactional Run"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes, you want to wrap a call into one ",(0,t.jsx)(n.code,{children:"Database Transaction"})," (see\n",(0,t.jsx)(n.a,{href:"https://laravel.com/docs/master/database#database-transactions",children:"Laravel Documentation"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Consider the following example: You want to create a new ",(0,t.jsx)(n.code,{children:"Team"})," and automatically assign yourself (i.e., your own\n",(0,t.jsx)(n.code,{children:"User"}),") to this newly created ",(0,t.jsx)(n.code,{children:"Team"}),". Your ",(0,t.jsx)(n.code,{children:"CreateTeamAction"})," may call a dedicated ",(0,t.jsx)(n.code,{children:"CreateTeamTask"})," and a\n",(0,t.jsx)(n.code,{children:"AssignMemberToTeamTask"})," afterwards."]}),"\n",(0,t.jsxs)(n.p,{children:["However, if the ",(0,t.jsx)(n.code,{children:"AssignMemberToTeamTask"}),' fails, for unknown reasons, you may want to "rollback" (i.e., remove) the\nnewly created ',(0,t.jsx)(n.code,{children:"Team"})," from the database in order to keep the database in a valid state."]}),"\n",(0,t.jsxs)(n.p,{children:["That's where ",(0,t.jsx)(n.code,{children:"DB::transactions"})," comes into play!"]}),"\n",(0,t.jsxs)(n.p,{children:["Apiato provides a ",(0,t.jsx)(n.code,{children:"transactionalRun(...$arguments)"})," method which internally just wraps the ",(0,t.jsx)(n.code,{children:"run()"})," method of the action in a ",(0,t.jsx)(n.code,{children:"DB::Transaction"})," and passes all the parameters ",(0,t.jsx)(n.code,{children:"as is"})," to it."]}),"\n",(0,t.jsxs)(n.p,{children:["If any ",(0,t.jsx)(n.code,{children:"Exception"})," occurs during the execution of the ",(0,t.jsx)(n.code,{children:"run()"}),", everything done in this context is\nautomatically rolled-back from the database. However, respective operations on the file system (e.g., you may also\nhave uploaded a profile picture for this ",(0,t.jsx)(n.code,{children:"Team"})," already) need to be performed\nmanually!"]}),"\n",(0,t.jsxs)(n.p,{children:["Typically, you may want to use the ",(0,t.jsx)(n.code,{children:"transactionalRun()"})," on the ",(0,t.jsx)(n.code,{children:"Controller"})," level!"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);