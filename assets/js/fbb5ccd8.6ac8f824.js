"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[1597],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},77955:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"optional-components/configs","title":"Configs","description":"* Definition","source":"@site/versioned_docs/version-9.x/optional-components/configs.md","sourceDirName":"optional-components","slug":"/optional-components/configs","permalink":"/docs/9.x/optional-components/configs","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/configs.md","tags":[],"version":"9.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1618096631000,"frontMatter":{"title":"Configs"},"sidebar":"docs","previous":{"title":"Middlewares","permalink":"/docs/9.x/optional-components/middlewares"},"next":{"title":"Commands","permalink":"/docs/9.x/optional-components/commands"}}');var o=i(74848),s=i(28453);const r={title:"Configs"},a=void 0,c={},l=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#definition",children:"Definition"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#code-samples",children:"Code Samples"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,o.jsxs)(n.p,{children:["Configs are files that container configurations. For more details about them check this ",(0,o.jsx)(n.a,{href:"https://laravel.com/docs/master/configuration",children:"doc"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"In each Apiato container, there are two types of config files:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"the container specific config file (a config file that contains the container specific configurations)."}),"\n",(0,o.jsx)(n.li,{children:"the container third party packages config files (a config file that belongs to a third party package, required by the composer file of the container)."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Your custom config files and third party packages config files, should be placed in the Container, unless it's too generic then it can be placed on the Ship Layer."}),"\n",(0,o.jsx)(n.li,{children:"Container can have as many config files as it needs."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"When publishing a third party package config file move it manually to its container or to the Ship Features Config folder in case it is generic."}),"\n",(0,o.jsx)(n.li,{children:"Framework config files (provided by laravel) lives at the default config directory on the root of the project."}),"\n",(0,o.jsxs)(n.li,{children:["You SHOULD NOT add any config file to the ",(0,o.jsx)(n.code,{children:"config"})," directory."]}),"\n",(0,o.jsxs)(n.li,{children:["The container specific config file, MUST have the same name of the container in lower letters and post-fixed with ",(0,o.jsx)(n.code,{children:"-container"}),", to prevent conflicts between third party packages and container specific packages."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"- app\n    - Containers\n        - {container-name}\n            - Configs\n                - {container-name}-container.php\n                - package-config-file1.php\n                - ...\n    - Ship\n        - Configs\n            - apiato.php\n            - ...\n- config\n    - app.php\n    - ...\n"})}),"\n",(0,o.jsx)(n.h3,{id:"code-samples",children:"Code Samples"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example simple Config file"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"<?php\n// app/Containers/{ContainerName}/Configs/{container-name}-container.php\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Namespace\n    |--------------------------------------------------------------------------\n    */\n    'namespace'       => 'App',\n\n    // some other config params here...\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can access the respective configuration key like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"$value = Config::get('{container-name}-container.namespace');     // returns 'App'\n$value = config('{container-name}-container.namespace');          // same, but using a function\n\n$defaultValue = Config::get('{container-name}-container.unknown.key', 'defaultvalue');   // returns 'defaultvalue' as this key is not set!\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);