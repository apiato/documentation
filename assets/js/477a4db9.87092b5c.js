"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[25343],{36302:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>r});var i=n(74848),t=n(28453);const s={title:"Policies",tags:["component","optional-component","policy","authorization","request"]},l=void 0,c={id:"components/optional-components/policies",title:"Policies",description:"Apiato policies are just Laravel Policies,",source:"@site/versioned_docs/version-13.x/components/optional-components/policies.md",sourceDirName:"components/optional-components",slug:"/components/optional-components/policies",permalink:"/docs/components/optional-components/policies",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-13.x/components/optional-components/policies.md",tags:[{inline:!0,label:"component",permalink:"/docs/tags/component"},{inline:!0,label:"optional-component",permalink:"/docs/tags/optional-component"},{inline:!0,label:"policy",permalink:"/docs/tags/policy"},{inline:!0,label:"authorization",permalink:"/docs/tags/authorization"},{inline:!0,label:"request",permalink:"/docs/tags/request"}],version:"13.x",lastUpdatedBy:"Mohammad Alavi",lastUpdatedAt:1746631e6,frontMatter:{title:"Policies",tags:["component","optional-component","policy","authorization","request"]},sidebar:"tutorialSidebar",previous:{title:"Notifications",permalink:"/docs/components/optional-components/notifications"},next:{title:"Repositories",permalink:"/docs/components/optional-components/repository/repositories"}},a={},r=[{value:"Rules",id:"rules",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Policy Auto-Discovery",id:"policy-auto-discovery",level:3}];function d(e){const o={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["Apiato policies are just ",(0,i.jsx)(o.a,{href:"https://laravel.com/docs/authorization",children:"Laravel Policies"}),",\nand they function in the exact same way as Laravel policies.\nHowever, they come with additional rules and conventions specific to Apiato."]}),"\n",(0,i.jsxs)(o.p,{children:["To generate new policies, you may use the ",(0,i.jsx)(o.code,{children:"apiato:make:policy"})," interactive command:"]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{children:"php artisan apiato:make:policy\n"})}),"\n",(0,i.jsx)(o.h2,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["All Policies:","\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["MUST be placed in the ",(0,i.jsx)(o.code,{children:"app/Containers/{section}/{container}/Policies"})," directory."]}),"\n",(0,i.jsxs)(o.li,{children:["MUST extend the ",(0,i.jsx)(o.code,{children:"App\\Ship\\Parents\\Policies\\Policy"})," class.","\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["The parent extension SHOULD be aliased as ",(0,i.jsx)(o.code,{children:"ParentPolicy"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(o.li,{children:["SHOULD be named after the model they are associated with, followed by the ",(0,i.jsx)(o.code,{children:"Policy"})," suffix. For instance, ",(0,i.jsx)(o.code,{children:"UserPolicy.php"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(o.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-php",children:"app\n\u2514\u2500\u2500 Containers\n    \u2514\u2500\u2500 Section\n        \u2514\u2500\u2500 Container\n            \u2514\u2500\u2500 Policies\n                \u251c\u2500\u2500 UserPolicy.php\n                \u2514\u2500\u2500 ...\n"})}),"\n",(0,i.jsx)(o.h2,{id:"code-example",children:"Code Example"}),"\n",(0,i.jsx)(o.p,{children:"Policies are defined exactly as you would define them in Laravel."}),"\n",(0,i.jsx)(o.h3,{id:"policy-auto-discovery",children:"Policy Auto-Discovery"}),"\n",(0,i.jsx)(o.p,{children:"Apiato offers a policy auto-discovery feature that eliminates the need for manual registration of model policies.\nThis automatic discovery process relies on adhering to standard Apiato naming conventions for policies."}),"\n",(0,i.jsxs)(o.p,{children:["By following the ",(0,i.jsx)(o.a,{href:"#rules",children:"rules"})," outlined above, you allow Apiato to automatically discover your policies."]}),"\n",(0,i.jsx)(o.p,{children:"To summarize:"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:["Policies must be stored within the ",(0,i.jsx)(o.code,{children:"app/Containers/{section}/{container}/Policies"})," directory."]}),"\n",(0,i.jsxs)(o.li,{children:["The policy name should mirror the corresponding model's name while appending a ",(0,i.jsx)(o.code,{children:"Policy"})," suffix. For instance, a ",(0,i.jsx)(o.code,{children:"User"})," model corresponds to a ",(0,i.jsx)(o.code,{children:"UserPolicy"})," policy class."]}),"\n"]})]})}function p(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>l,x:()=>c});var i=n(96540);const t={},s=i.createContext(t);function l(e){const o=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:o},e.children)}}}]);