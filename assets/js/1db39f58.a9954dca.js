"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[9683],{28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(96540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}},72883:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/optional-components/tests","title":"Tests","description":"Apiato is built with testing in mind.","source":"@site/versioned_docs/version-12.x/components/optional-components/tests.md","sourceDirName":"components/optional-components","slug":"/components/optional-components/tests","permalink":"/docs/components/optional-components/tests","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-12.x/components/optional-components/tests.md","tags":[{"inline":true,"label":"component","permalink":"/docs/tags/component"},{"inline":true,"label":"optional-component","permalink":"/docs/tags/optional-component"},{"inline":true,"label":"test","permalink":"/docs/tags/test"}],"version":"12.x","lastUpdatedBy":"Mohammad Alavi","lastUpdatedAt":1734276516000,"frontMatter":{"title":"Tests","tags":["component","optional-component","test"]},"sidebar":"tutorialSidebar","previous":{"title":"Service Providers","permalink":"/docs/components/optional-components/service-providers"},"next":{"title":"Values","permalink":"/docs/components/optional-components/values"}}');var i=n(74848),r=n(28453);const a={title:"Tests",tags:["component","optional-component","test"]},o=void 0,l={},d=[{value:"Definitions",id:"definitions",level:2},{value:"Unit tests",id:"unit-tests",level:4},{value:"Functional tests",id:"functional-tests",level:4},{value:"Rules",id:"rules",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Functional Tests",id:"functional-tests-1",level:2},{value:"Properties",id:"properties",level:3},{value:"endpoint",id:"endpoint",level:4},{value:"auth",id:"auth",level:4},{value:"access",id:"access",level:4},{value:"Methods",id:"methods",level:3},{value:"makeCall",id:"makecall",level:4},{value:"injectId",id:"injectid",level:4},{value:"getTestingUser",id:"gettestinguser",level:4},{value:"getTestingUserWithoutAccess",id:"gettestinguserwithoutaccess",level:4},{value:"endpoint",id:"method",level:4},{value:"auth",id:"method",level:4},{value:"Available Assertions",id:"available-assertions",level:2},{value:"assertModelCastsIsEmpty",id:"assertmodelcastsisempty",level:4},{value:"assertDatabaseTable",id:"assertdatabasetable",level:4},{value:"getGateMock",id:"getgatemock",level:4},{value:"assertCriteriaPushedToRepository",id:"assertcriteriapushedtorepository",level:4},{value:"assertNoCriteriaPushedToRepository",id:"assertnocriteriapushedtorepository",level:4},{value:"allowAddRequestCriteriaInvocation",id:"allowaddrequestcriteriainvocation",level:4},{value:"Faker",id:"faker",level:2},{value:"Test Helper Methods",id:"test-helper-methods",level:2},{value:"createSpyWithRepository",id:"createspywithrepository",level:4},{value:"inIds",id:"inids",level:4},{value:"Create Live Testing Data",id:"create-live-testing-data",level:2}];function c(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["Apiato is built with testing in mind.\nIn fact,\nsupport for testing with PHPUnit is included out of the box\nand a ",(0,i.jsx)(s.code,{children:"phpunit.xml"})," file is already set up for your application.\nIn addition to the testing capabilities provided by Laravel,\nApiato enhances the testing experience by including convenient helper methods.\nThese methods enable you to write expressive tests for your applications, further enhancing the testing process.\nYou can refer to Laravel documentation on ",(0,i.jsx)(s.a,{href:"https://laravel.com/docs/http-tests",children:"HTTP tests"})," for more information on the available testing methods."]}),"\n",(0,i.jsx)(s.p,{children:"To generate new tests you may use the following interactive commands:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"php artisan apiato:generate:test:unit\nphp artisan apiato:generate:test:functional\nphp artisan apiato:generate:test:testcase\n"})}),"\n",(0,i.jsx)(s.h2,{id:"definitions",children:"Definitions"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"unit-tests",children:"Unit tests"}),"\n",(0,i.jsx)(s.p,{children:"Unit tests are tests that focus on a very small, isolated portion of your code.\nIn fact, most unit tests probably focus on a single method."}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"functional-tests",children:"Functional tests"}),"\n",(0,i.jsx)(s.p,{children:"Functional tests may test a larger portion of your code,\nincluding how several objects interact with each other or even a full HTTP request to a JSON endpoint.\nGenerally, most of your tests should be functional tests.\nThese types of tests provide the most confidence that your system as a whole is functioning as intended."}),"\n",(0,i.jsx)(s.h2,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["All container-specific tests:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST be placed in the ",(0,i.jsx)(s.code,{children:"app/Containers/{Section}/{Container}/Tests"})," directory."]}),"\n",(0,i.jsxs)(s.li,{children:["Functional tests:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST be placed in the ",(0,i.jsx)(s.code,{children:"app/Containers/{Section}/{Container}/Tests/Functional"})," directory."]}),"\n",(0,i.jsxs)(s.li,{children:["API tests:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST be placed in the ",(0,i.jsx)(s.code,{children:"app/Containers/{Section}/{Container}/Tests/Functional/API"})," directory."]}),"\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\Functional\\ApiTestCase"})," class.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\FunctionalTestCase"})," class.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\ContainerTestCase"})," class."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["CLI tests:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST be placed in the ",(0,i.jsx)(s.code,{children:"app/Containers/{Section}/{Container}/Tests/Functional/CLI"})," directory."]}),"\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\Functional\\CliTestCase"})," class.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\FunctionalTestCase"})," class.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\ContainerTestCase"})," class."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["Unit tests:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST be placed in the ",(0,i.jsx)(s.code,{children:"app/Containers/{Section}/{Container}/Tests/Unit"})," directory."]}),"\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\UnitTestCase"})," class.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Containers\\{Section}\\{Container}\\Tests\\ContainerTestCase"})," class."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.li,{children:"Directory structure MUST exactly match the Container's directory structure."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["All ",(0,i.jsx)(s.code,{children:"Ship"})," Unit tests:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["MUST be placed in the ",(0,i.jsx)(s.code,{children:"app/Ship/Tests/Unit"})," directory."]}),"\n",(0,i.jsxs)(s.li,{children:["MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Ship\\Tests\\ShipTestCase"})," class."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["All ",(0,i.jsx)(s.code,{children:"ContainerTestCases"})," & ",(0,i.jsx)(s.code,{children:"ShipTestCase"})," MUST extend the ",(0,i.jsx)(s.code,{children:"App\\Ship\\Parents\\Tests\\PhpUnit\\TestCase"})," class.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["The parent extension SHOULD be aliased as ",(0,i.jsx)(s.code,{children:"ParentTestCase"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-markdown",children:"app\n\u251c\u2500\u2500 Containers\n\u2502   \u2514\u2500\u2500 Section\n\u2502       \u2514\u2500\u2500 Container\n\u2502           \u2514\u2500\u2500 Tests\n\u2502               \u251c\u2500\u2500 Functional\n\u2502               \u2502   \u251c\u2500\u2500 API\n\u2502               \u2502   \u2502   \u251c\u2500\u2500 CreateUserTest.php\n\u2502               \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502               \u2502   \u251c\u2500\u2500 CLI\n\u2502               \u2502   \u2502   \u251c\u2500\u2500 CreateAdminCommandTest.php\n\u2502               \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502               \u2502   \u251c\u2500\u2500 ApiTestCase.php\n\u2502               \u2502   \u2514\u2500\u2500 CliTestCase.php\n\u2502               \u251c\u2500\u2500 Unit\n\u2502               \u2502   \u251c\u2500\u2500 Actions\n\u2502               \u2502   \u2502   \u251c\u2500\u2500 CreateUserActionTest.php\n\u2502               \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502               \u2502   \u251c\u2500\u2500 AnotherDirectory\n\u2502               \u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502               \u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502               \u2502   \u2514\u2500\u2500 UI\n\u2502               \u2502       \u251c\u2500\u2500 API\n\u2502               \u2502       \u2502   \u251c\u2500\u2500 Controllers\n\u2502               \u2502       \u2502   \u251c\u2500\u2500 Requests\n\u2502               \u2502       \u2502   \u251c\u2500\u2500 Transformers\n\u2502               \u2502       \u2502   \u2514\u2500\u2500 ...\n\u2502               \u2502       \u2514\u2500\u2500 WEB\n\u2502               \u2502           \u251c\u2500\u2500 Controllers\n\u2502               \u2502           \u251c\u2500\u2500 Requests\n\u2502               \u2502           \u251c\u2500\u2500 Transformers\n\u2502               \u2502           \u2514\u2500\u2500 ...\n\u2502               \u251c\u2500\u2500 ContainerTestCase.php\n\u2502               \u251c\u2500\u2500 FunctionalTestCase.php\n\u2502               \u2514\u2500\u2500 UnitTestCase.php\n\u2514\u2500\u2500 Ship\n\u2514\u2500\u2500 Tests\n\u251c\u2500\u2500 Unit\n\u2502   \u251c\u2500\u2500 UrlRuleTest.php\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ShipTestCase.php\n"})}),"\n",(0,i.jsx)(s.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(s.p,{children:"Unit tests are defined in the same manner as you would define them in Laravel.\nHowever, Functional tests follow a distinct approach.\nHere's an example of how to write functional tests:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"namespace App\\Containers\\AppSection\\User\\Tests\\Functional\\API;\n\nuse App\\Containers\\AppSection\\User\\Data\\Factories\\UserFactory;\nuse App\\Containers\\AppSection\\User\\Tests\\Functional\\ApiTestCase;\nuse Illuminate\\Testing\\Fluent\\AssertableJson;\nuse PHPUnit\\Framework\\Attributes\\CoversNothing;\nuse PHPUnit\\Framework\\Attributes\\Group;\n\n#[Group('user')]\n#[CoversNothing]\nclass FindUserByIdTest extends ApiTestCase\n{\n    protected string $endpoint = 'get@v1/users/{id}';\n    protected bool $auth = true;\n    protected array $access = [\n        'permissions' => 'search-users',\n        'roles' => '',\n    ];\n\n    public function testFindUser(): void\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertOk();\n        $response->assertJson(\n            static fn (AssertableJson $json) => $json->has('data')\n                    ->where('data.id', \\Hashids::encode($user->id))\n                    ->etc()\n        );\n    }\n}\n"})}),"\n",(0,i.jsxs)(s.p,{children:["To learn more about the properties and methods used,\nsuch as ",(0,i.jsx)(s.code,{children:"endpoint"})," and ",(0,i.jsx)(s.code,{children:"makeCall"}),", please read to the following section."]}),"\n",(0,i.jsx)(s.h2,{id:"functional-tests-1",children:"Functional Tests"}),"\n",(0,i.jsx)(s.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.p,{children:"Certain test helper methods access properties defined in your test class to execute their tasks effectively.\nBelow, we will explore these properties and their corresponding methods:"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"endpoint",children:"endpoint"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"$endpoint"})," property is used\nto define the endpoints you want to access when making a call using the ",(0,i.jsx)(s.code,{children:"makeCall"})," method.\nIt is defined as a string in the following format: ",(0,i.jsx)(s.code,{children:"method@url"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"class FindUserByIdTest extends ApiTestCase\n{\n    // highlight-start\n    protected string $endpoint = 'get@v1/profile';\n    // highlight-end\n    \n    public function testGetAuthenticatedUser(): void\n    {\n        $user = $this->getTestingUser();\n\n        $response = $this->makeCall();\n        // You can override the \"endpoint\" property in specific test methods\n        // $response = $this->endpoint('get@v1/users')->makeCall();\n                \n        $response->assertOk();\n        // other assertions...\n    }\n}\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"auth",children:"auth"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"$auth"})," property is used to determine whether the endpoint being called requires authentication or not in your test class.\nIf you do not explicitly define the ",(0,i.jsx)(s.code,{children:"$auth"})," property in your test class, it will be defaulted to ",(0,i.jsx)(s.code,{children:"true"})," automatically."]}),"\n",(0,i.jsxs)(s.p,{children:["In the context of testing, when ",(0,i.jsx)(s.code,{children:"auth"})," is set to true,\nthe ",(0,i.jsx)(s.code,{children:"makeCall"})," method will handle authentication by creating a testing user\n(if one is not already available) and injecting their access token into the headers before making the API call."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"class ListUsersTest extends ApiTestCase\n{\n    protected string $endpoint = 'get@v1/users';\n    // highlight-start\n    protected bool $auth = false;\n    // highlight-end\n    \n    public function testListUsers(): void\n    {\n        $response = $this->makeCall();\n        // You can override the \"auth\" property in specific test methods\n        // $response = $this->auth(true)->makeCall();\n        \n        $response->assertOk();\n        // other assertions...\n    }\n}\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"access",children:"access"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"$access"})," property is used\nto define roles or permissions that you want to assign to your testing users within a test class.\nWhen you use the ",(0,i.jsx)(s.code,{children:"getTestingUser"})," method,\nthe testing user instance will automatically inherit all the roles and permissions specified in the ",(0,i.jsx)(s.code,{children:"$access"})," property."]}),"\n",(0,i.jsxs)(s.p,{children:["By setting the desired roles and permissions in the ",(0,i.jsx)(s.code,{children:"$access"})," property,\nyou can conveniently configure the testing user with the necessary access rights for your test scenarios.\nThis ensures that the testing user has the appropriate privileges when interacting with the application during testing."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"class DeleteUserTest extends ApiTestCase\n{\n    protected string $endpoint = 'delete@v1/users/{id}';\n    // highlight-start\n    protected array $access = [\n        'permissions' => 'delete-users',\n        'roles' => 'admin',\n    ];\n    // highlight-end\n    \n    public function testDeleteUser(): void\n    {\n        // The testing user will have the \"delete-users\" permission and \"admin\" role.\n        // highlight-start\n        $user = $this->getTestingUser();\n        // highlight-end\n    \n        $response = $this->injectId($user->id)->makeCall();\n\n        $response->assertNoContent();        \n    }\n}\n"})}),"\n",(0,i.jsx)(s.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"#makecall",children:"makeCall"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#injectid",children:"injectId"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#gettestinguser",children:"getTestingUser"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#gettestinguserwithoutaccess",children:"getTestingUserWithoutAccess"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#endpoint-method",children:"endpoint"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#auth-method",children:"auth"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"makecall",children:"makeCall"}),"\n",(0,i.jsxs)(s.p,{children:["To make a request to your application, you may invoke the ",(0,i.jsx)(s.code,{children:"makeCall"})," method within your functional test.\nThis method combines the functionalities of ",(0,i.jsx)(s.a,{href:"https://laravel.com/docs/http-tests#testing-json-apis",children:"Laravel HTTP test"})," helpers with the ",(0,i.jsx)(s.a,{href:"#properties",children:"properties"}),"\ndefined in your functional test to make a request to the application."]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"makeCall"})," method returns an instance of ",(0,i.jsx)(s.code,{children:"Illuminate\\Testing\\TestResponse"}),",\nwhich provides a variety of ",(0,i.jsx)(s.a,{href:"https://laravel.com/docs/http-tests#fluent-json-testing",children:"helpful assertions"}),"\nthat allow you to inspect your application's responses."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$this->makeCall();\n\n$this->makeCall([\n    'email'    => $userDetails['email'],\n    'password' => $userDetails['password'],\n]);\n\n$this->makeCall($data, $headers);\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"injectid",children:"injectId"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"injectId"})," method enables you to inject an ID into the endpoint you want to test within your functional tests."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"// user with ID 100\n// endpoint = 'get@v1/users/{id}'\n\n$this->injectId($user->id)->makeCall();\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this example, the original endpoint is ",(0,i.jsx)(s.code,{children:"'get@v1/users/{id}'"}),", and the desired ID to be injected is ",(0,i.jsx)(s.code,{children:"100"}),".\nThe ",(0,i.jsx)(s.code,{children:"injectId"})," method is then called with these parameters.\nThe method replaces ",(0,i.jsx)(s.code,{children:"{id}"})," in the endpoint with the provided ID,\nresulting in the modified endpoint ",(0,i.jsx)(s.code,{children:"'get@v1/users/100'"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["By default, ",(0,i.jsx)(s.code,{children:"injectId"}),"\nwill look for a string of ",(0,i.jsx)(s.code,{children:"{id}"})," in the endpoint to replace with the provided id. Remember\nto provide the third parameter if your endpoint expects an id with a different name."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"// endpoint = 'get@v1/users/{user_id}/articles/{id}'\n// You can also chain multiple `injectId` calls!\n\n$this->injectId($articles->id)->injectId($user->id, replace: '{user_id}')->makeCall();\n"})}),"\n",(0,i.jsxs)(s.p,{children:["When the ",(0,i.jsx)(s.a,{href:"/docs/security/hash-id",children:"Hash ID"})," feature is enabled,\nthe ",(0,i.jsx)(s.code,{children:"injectId"})," method will automatically encode the provided ID before injecting it into the endpoint.\nHowever, you have the option to control this behavior by using the second parameter of the ",(0,i.jsx)(s.code,{children:"injectId"})," method,\n",(0,i.jsx)(s.code,{children:"skipEncoding"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"// endpoint = 'get@v1/users/{user_id}'\n\n// this will encode the id automatically\n$this->injectId($user->id, skipEncoding: false, replace: '{user_id}')->makeCall($data);\n// this will skip the encoding\n$this->injectId($user->getHashedKey(), skipEncoding: true, replace: '{user_id}')->makeCall($data);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["By utilizing the ",(0,i.jsx)(s.code,{children:"injectId"})," method, you can dynamically inject an ID into the endpoint,\nallowing you to test specific resources or scenarios that depend on resource identifiers."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"gettestinguser",children:"getTestingUser"}),"\n",(0,i.jsxs)(s.p,{children:["When you call ",(0,i.jsx)(s.code,{children:"getTestingUser"})," method,\nit returns a testing user instance with randomly generated attributes and all the roles and permissions\nspecified in the ",(0,i.jsx)(s.code,{children:"$access"})," property.\nThis ensures that the testing user has the appropriate access rights for the defined roles and permissions.\nHowever,\nyou also have the flexibility\nto override these attributes and access rights by passing the desired values as arguments to the method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"// The testing user will be created with randomly generated attributes \n// and will inherit the roles and permissions specified in the `$access` property.\n$user = $this->getTestingUser();\n\n// The testing user will be created with the provided attributes and access rights.\n$user = $this->getTestingUser([\n    'email' => 'hello@mail.test',\n    'name' => 'Hello',\n    'password' => 'secret',\n], [\n    'permissions' => 'jump',\n    'roles' => 'jumper',\n]);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Additionally, to create an admin user, you can pass ",(0,i.jsx)(s.code,{children:"true"})," as the third argument when invoking ",(0,i.jsx)(s.code,{children:"getTestingUser"}),".\nThis will use the ",(0,i.jsx)(s.code,{children:"admin"})," state of ",(0,i.jsx)(s.code,{children:"app/Containers/AppSection/User/Data/Factories/UserFactory.php"})," to create the testing user."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$user = $this->getTestingUser(null, null, true);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"getTestingUser"})," method is configured to work with the default Apiato configuration.\nHowever, if you are using a custom user model,\nyou will need to update the ",(0,i.jsx)(s.code,{children:"tests"})," configuration in ",(0,i.jsx)(s.code,{children:"app/Ship/Configs/apiato.php"}),".\nThis configuration file allows you\nto specify your custom user model and the corresponding model factory state for testing."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"gettestinguserwithoutaccess",children:"getTestingUserWithoutAccess"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"getTestingUserWithoutAccess"})," method allows you to obtain a testing user instance that doesn't have any assigned permissions or roles.\nIt is a shortcut for ",(0,i.jsx)(s.code,{children:"getTestingUser(null, null)"}),".\nThis skips all the roles and permissions defined in your test class ",(0,i.jsx)(s.code,{children:"$access"})," property."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$user = $this->getTestingUserWithoutAccess();\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"method",children:"endpoint"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"endpoint"})," method allows you to specify the endpoint you want to test within your functional tests.\nThis method is especially useful\nwhen you need to override the default endpoint that is defined in the ",(0,i.jsx)(s.code,{children:"$endpoint"})," property of the test class,\nspecifically for a particular test method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$this->endpoint('get@v1/register')->makeCall();\n"})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["The order in which you call ",(0,i.jsx)(s.code,{children:"endpoint"})," method is crucial.\nMake sure to call it before ",(0,i.jsx)(s.code,{children:"injectId"})," method,\nor else ",(0,i.jsx)(s.code,{children:"injectId"})," will not replace the ID in the overridden endpoint."]})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"method",children:"auth"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"auth"})," method allows you\nto specify the authentication status of the endpoint you want to test within your functional tests.\nThis method is especially useful\nwhen you need to override the default authentication status that is defined in the ",(0,i.jsx)(s.code,{children:"$auth"})," property of the test class,\nspecifically for a particular test method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$this->auth(false)->makeCall();\n"})}),"\n",(0,i.jsx)(s.h2,{id:"available-assertions",children:"Available Assertions"}),"\n",(0,i.jsx)(s.p,{children:"Apiato provides a variety of custom assertion methods that you may utilize when testing your application."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"#assertModelCastsIsEmpty",children:"assertModelCastsIsEmpty"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#assertDatabaseTable",children:"assertDatabaseTable"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#getGateMock",children:"getGateMock"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#assertcriteriapushedtorepository",children:"assertCriteriaPushedToRepository"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#assertnocriteriapushedtorepository",children:"assertNoCriteriaPushedToRepository"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#allowaddrequestcriteriainvocation",children:"allowAddRequestCriteriaInvocation"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"assertmodelcastsisempty",children:"assertModelCastsIsEmpty"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"assertModelCastsIsEmpty"})," method allows you to assert that the ",(0,i.jsx)(s.code,{children:"$casts"})," property of a model is empty.\nBy default, the ",(0,i.jsx)(s.code,{children:"$casts"})," property of a model includes the ",(0,i.jsx)(s.code,{children:"id"})," and,\nif the model is soft deletable, the ",(0,i.jsx)(s.code,{children:"deleted_at"}),".\nThis method excludes these default values from the assertion."]}),"\n",(0,i.jsxs)(s.p,{children:["Here's an example of how to use ",(0,i.jsx)(s.code,{children:"assertModelCastsIsEmpty"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$this->assertModelCastsIsEmpty($model);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In the code snippet above, ",(0,i.jsx)(s.code,{children:"$model"})," represents the instance of the model you want to test.\nThe ",(0,i.jsx)(s.code,{children:"assertModelCastsIsEmpty"})," method will verify that the ",(0,i.jsx)(s.code,{children:"$casts"})," property of the model is empty,\nignoring the default ",(0,i.jsx)(s.code,{children:"id"})," and ",(0,i.jsx)(s.code,{children:"deleted_at"})," values."]}),"\n",(0,i.jsxs)(s.p,{children:["If you want to add additional values to the ignore list,\nyou can pass them as an array to the ",(0,i.jsx)(s.code,{children:"assertModelCastsIsEmpty"})," method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$this->assertModelCastsIsEmpty($model, ['value1', 'value2']);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this case, the assertion will ignore the ",(0,i.jsx)(s.code,{children:"id"}),", ",(0,i.jsx)(s.code,{children:"deleted_at"}),",\n",(0,i.jsx)(s.code,{children:"value1"}),", and ",(0,i.jsx)(s.code,{children:"value2"})," values when verifying the ",(0,i.jsx)(s.code,{children:"$casts"})," property of the model."]}),"\n",(0,i.jsxs)(s.p,{children:["By using the ",(0,i.jsx)(s.code,{children:"assertModelCastsIsEmpty"})," method,\nyou can verify that the ",(0,i.jsx)(s.code,{children:"$casts"})," property of a model does not contain any unexpected values,\nensuring that the model's attributes are not automatically casted."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"assertdatabasetable",children:"assertDatabaseTable"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Available since Core v8.5.0"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["This method is used\nto verify\nif the database table specified by ",(0,i.jsx)(s.code,{children:"table"})," has the expected columns specified in the ",(0,i.jsx)(s.code,{children:"expectedColumns"})," array.\nThe array should be in the format ['column_name' => 'column_type'],\nwhere the column type is a string representing the expected data type of the column."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$this->assertDatabaseTable('users', ['id' => 'bigint']);\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"getgatemock",children:"getGateMock"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Available since Core v8.5.0"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["This assertion helps you to test whether the ",(0,i.jsx)(s.code,{children:"Gate::allows"})," method is invoked with the correct arguments."]}),"\n",(0,i.jsxs)(s.p,{children:["Let's\nconsider a scenario\nwhere a request class utilizes the ",(0,i.jsx)(s.code,{children:"authorize"})," method\nto determine whether a user has the necessary permissions to access a particular resource.\nThe primary objective is\nto test whether the ",(0,i.jsx)(s.code,{children:"authorize"})," method correctly invokes the ",(0,i.jsx)(s.code,{children:"Gate::allows"})," method with the appropriate arguments."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"// PUT '/users/{id}'\n\n// UpdateUserRequest.php\npublic function authorize(Gate $gate): bool\n{\n    // Here, we check if the user's id sent in the request has the necessary permissions to 'update'.\n    return $gate->allows('update', [User::find($this->id)]);\n}\n\n// UpdateUserRequestTest.php  \npublic function testAuthorizeMethodGateCall(): void\n{\n    $user = $this->getTestingUserWithoutAccess();\n    $request = UpdateUserRequest::injectData([], $user)\n        ->withUrlParameters(['id' => $user->id]);\n    // If the id is sent as a body parameter in the request, you can use the following:\n    // $request = UpdateUserRequest::injectData(['id' => $user->getHashedKey()], $ user);\n    \n    $gateMock = $this->getGateMock(policyMethodName: 'update', args: [\n        // Ensure you obtain a fresh model instance; using the $user variable directly will cause the test to fail.\n        User::find($user->id),\n    ]);\n    \n    $this->assertTrue($request->authorize($gateMock));\n}\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In this code, we're examining the testing of the ",(0,i.jsx)(s.code,{children:"authorize"})," method within a FormRequest class.\nThe main objective is to confirm that it appropriately interacts with Laravel's Gate functionality.\nThe test ensures that the ",(0,i.jsx)(s.code,{children:"Gate::allows"})," method is invoked with the correct parameters,\nchecking if users have the required permissions to perform updates.\nIf the authorization logic is correctly implemented, this test should pass,\nensuring that only users with the necessary permissions can perform updates."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"assertcriteriapushedtorepository",children:"assertCriteriaPushedToRepository"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Available since Core v8.9.0"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Asserts that a criteria is pushed to a repository."}),"\n",(0,i.jsxs)(s.p,{children:["In the following example, we want to test\nif the ",(0,i.jsx)(s.code,{children:"UserIsAdminCriteria"})," is pushed to the ",(0,i.jsx)(s.code,{children:"UserRepository"})," when the ",(0,i.jsx)(s.code,{children:"ListUsersTask"})," is called with the ",(0,i.jsx)(s.code,{children:"admin"})," method."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"public function testCanListAdminUsers(): void\n{\n    $this->assertCriteriaPushedToRepository(\n        UserRepository::class,\n        UserIsAdminCriteria::class,\n        ['admin' => true],\n    );\n    $task = app(ListUsersTask::class);\n\n    $task->admin();\n}\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"assertnocriteriapushedtorepository",children:"assertNoCriteriaPushedToRepository"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Available since Core v8.9.0"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Asserts that no criteria is pushed to a repository."}),"\n",(0,i.jsxs)(s.p,{children:["In the following example, we want to test\nif no criteria is pushed to the ",(0,i.jsx)(s.code,{children:"UserRepository"})," when the ",(0,i.jsx)(s.code,{children:"ListUsersTask"}),"'s ",(0,i.jsx)(s.code,{children:"admin"})," method is called with a ",(0,i.jsx)(s.code,{children:"null"})," value."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"public function testCanListAllUsers(): void\n{\n    $this->assertNoCriteriaPushedToRepository(UserRepository::class);\n    $task = app(ListUsersTask::class);\n\n    $task->admin(null);\n}\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"allowaddrequestcriteriainvocation",children:"allowAddRequestCriteriaInvocation"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Available since Core v8.9.0"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Allow ",(0,i.jsx)(s.code,{children:"addRequestCriteria"})," method invocation on the repository mock.\nThis is particularly useful when you want to test a repository that uses the\n",(0,i.jsx)(s.a,{href:"/docs/components/optional-components/repository/repositories#requestcriteria",children:"RequestCriteria"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"public function testCanListAdminUsers(): void\n{\n    $repositoryMock = $this->assertCriteriaPushedToRepository(\n        UserRepository::class,\n        UserIsAdminCriteria::class,\n        ['admin' => true],\n    );\n    // highlight-next-line\n    $this->allowAddRequestCriteriaInvocation($repositoryMock);\n    $task = app(ListUsersTask::class);\n\n    $task->admin();\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"faker",children:"Faker"}),"\n",(0,i.jsxs)(s.p,{children:["An instance of ",(0,i.jsx)(s.a,{href:"https://github.com/FakerPHP/Faker",children:"Faker"})," is automatically provided in every test class, allowing you to generate fake data easily.\nYou can access it using ",(0,i.jsx)(s.code,{children:"$this->faker"}),"."]}),"\n",(0,i.jsx)(s.admonition,{title:"Deprecation Notice",type:"caution",children:(0,i.jsxs)(s.p,{children:["This feature is deprecated and will be removed in the next major release.\nYou should use the Laravel ",(0,i.jsx)(s.code,{children:"fake"})," helper function instead."]})}),"\n",(0,i.jsx)(s.h2,{id:"test-helper-methods",children:"Test Helper Methods"}),"\n",(0,i.jsx)(s.p,{children:"Apiato provides a variety of helper methods that you may utilize when testing your application."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"#createspywithrepository",children:"createSpyWithRepository"}),(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.a,{href:"#inIds",children:"inIds"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"createspywithrepository",children:"createSpyWithRepository"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsx)(s.p,{children:"Available since Core v8.9.0"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"This method is useful when you want to test if a repository method is called within an Action, SubAction or a Task."}),"\n",(0,i.jsxs)(s.p,{children:["In the following example,\nwe want to test if the ",(0,i.jsx)(s.code,{children:"run"})," method of the ",(0,i.jsx)(s.code,{children:"CreateUserTask"})," is called within the ",(0,i.jsx)(s.code,{children:"CreateUserAction"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"public function testCanCreateUser(): void\n{\n    $data = [\n        'email' => 'gandalf@the.grey',\n        'password' => 'you-shall-not-pass',\n    ];\n    $taskSpy = $this->createSpyWithRepository(CreateUserTask::class, UserRepository::class);\n    $action = app(CreateUserAction::class);\n\n    $action->run($data);\n    \n    $taskSpy->shouldHaveReceived('run')->once()->with($data);\n}\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h4,{id:"inids",children:"inIds"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"inIds"})," method allows you to check if the given hashed ID exists within the provided model collection."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-php",children:"$hashedId = 'hashed_123';\n$collection = Model::all();\n\n$isInCollection = $this->inIds($hashedId, $collection);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["By leveraging the ",(0,i.jsx)(s.code,{children:"inIds"})," method, you can streamline your testing process when working with hashed identifiers,\nensuring that the expected hashed IDs are present within your model collections."]}),"\n",(0,i.jsx)(s.admonition,{title:"Deprecation Notice",type:"caution",children:(0,i.jsx)(s.p,{children:"This method will be removed in the next major release and will not be available in test classes."})}),"\n",(0,i.jsx)(s.h2,{id:"create-live-testing-data",children:"Create Live Testing Data"}),"\n",(0,i.jsx)(s.p,{children:"To test your application using live testing data,\nsuch as creating items in an inventory, you can utilize the feature designed specifically for this purpose.\nIt allows for the automatic generation of testing data,\nwhich can be helpful during staging or when real people are testing your application."}),"\n",(0,i.jsxs)(s.p,{children:["To create your live testing data, navigate to the ",(0,i.jsx)(s.code,{children:"app/Ship/Seeder/SeedTestingData.php"})," seeder class.\nWithin this class, you can define the logic and data generation process for your testing data."]}),"\n",(0,i.jsx)(s.p,{children:"Once you have defined your testing data,\nyou can run the following command in your terminal:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"php artisan apiato:seed-test\n"})}),"\n",(0,i.jsx)(s.p,{children:"This command triggers the seeding process specifically for testing data,\npopulating your application with the generated data."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);