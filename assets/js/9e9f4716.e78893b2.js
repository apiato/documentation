"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[37950],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var o=i(96540);const a={},t=o.createContext(a);function r(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(t.Provider,{value:n},e.children)}},29615:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"digging-deeper/advance-configuration","title":"Advance Configuration","description":"Apiato provides a fluent configuration API that allows you to customize how your application loads resources, routes,","source":"@site/docs/digging-deeper/advance-configuration.mdx","sourceDirName":"digging-deeper","slug":"/digging-deeper/advance-configuration","permalink":"/docs/next/digging-deeper/advance-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/docs/digging-deeper/advance-configuration.mdx","tags":[{"inline":true,"label":"digging-deeper","permalink":"/docs/next/tags/digging-deeper"},{"inline":true,"label":"advance-configuration","permalink":"/docs/next/tags/advance-configuration"}],"version":"current","lastUpdatedBy":"Mohammad Alavi","lastUpdatedAt":1746631000000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Advance Configuration","tags":["digging-deeper","advance-configuration"]},"sidebar":"tutorialSidebar","previous":{"title":"Code Generator","permalink":"/docs/next/the-basics/code-generator"},"next":{"title":"Helpers","permalink":"/docs/next/digging-deeper/helpers"}}');var a=i(74848),t=i(28453);const r={sidebar_position:10,title:"Advance Configuration",tags:["digging-deeper","advance-configuration"]},s=void 0,d={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Core Configuration Methods",id:"core-configuration-methods",level:2},{value:"configure",id:"configure",level:3},{value:"useSharedPath",id:"usesharedpath",level:3},{value:"Resource Loading Methods",id:"resource-loading-methods",level:2},{value:"withConfigs",id:"configs",level:3},{value:"withEvents",id:"events",level:3},{value:"withCommands",id:"commands",level:3},{value:"withHelpers",id:"helpers",level:3},{value:"withMigrations",id:"migrations",level:3},{value:"Component Configuration Methods",id:"component-configuration-methods",level:2},{value:"withProviders",id:"providers",level:3},{value:"withSeeders",id:"seeders",level:3},{value:"withTranslations",id:"withtranslations",level:3},{value:"withViews",id:"views",level:3},{value:"withRouting",id:"routing",level:3},{value:"withFactories",id:"factories",level:3},{value:"withRepositories",id:"repositories",level:3},{value:"create",id:"create",level:3},{value:"Example",id:"example",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Apiato provides a fluent configuration API that allows you to customize how your application loads resources, routes,\nproviders, and more. Apiato uses a set of sensible defaults for loading resources and configuring components.\nThis documentation explains how to use the ",(0,a.jsx)(n.code,{children:"Apiato::configure()"})," method and its various options to customize your Apiato application."]}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsxs)(n.p,{children:["To use the configuration builder, you can call the ",(0,a.jsx)(n.code,{children:"Apiato::configure()"})," method in your application's bootstrap file (e.g., ",(0,a.jsx)(n.code,{children:"bootstrap/app.php"}),")."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$apiato = Apiato::configure(basePath: '/path/to/app')->create();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"core-configuration-methods",children:"Core Configuration Methods"}),"\n",(0,a.jsx)(n.h3,{id:"configure",children:"configure"}),"\n",(0,a.jsx)(n.p,{children:"Initializes the Apiato configuration builder with an optional base path."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$builder = Apiato::configure('/path/to/app');\n"})}),"\n",(0,a.jsx)(n.p,{children:"If no base path is provided, Apiato will attempt to determine it from:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"APP_BASE_PATH"})," environment variable"]}),"\n",(0,a.jsx)(n.li,{children:"The Composer autoloader location"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"usesharedpath",children:"useSharedPath"}),"\n",(0,a.jsxs)(n.p,{children:["Sets the path for shared components (defaults to ",(0,a.jsx)(n.code,{children:"app/Ship"}),")."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()->useSharedPath('/path/to/shared');\n"})}),"\n",(0,a.jsx)(n.h2,{id:"resource-loading-methods",children:"Resource Loading Methods"}),"\n",(0,a.jsx)(n.p,{children:"Each of these methods accepts directory paths or glob patterns."}),"\n",(0,a.jsx)(n.h3,{id:"configs",children:"withConfigs"}),"\n",(0,a.jsx)(n.p,{children:"Registers configuration file paths."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()->withConfigs(\n    shared_path('Configs'),\n    '/app/Containers/ExampleSection/ExampleContainer/Configs',\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"events",children:"withEvents"}),"\n",(0,a.jsx)(n.p,{children:"Registers event discovery paths."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()->withEvents(\n    shared_path('Listeners'),\n    '/app/Containers/ExampleSection/ExampleContainer/Listeners',\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"commands",children:"withCommands"}),"\n",(0,a.jsx)(n.p,{children:"Registers console command paths."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()->withCommands(\n    shared_path('Commands'),\n    '/app/Containers/ExampleSection/ExampleContainer/UI/CLI/Commands',\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"helpers",children:"withHelpers"}),"\n",(0,a.jsx)(n.p,{children:"Registers helper file paths."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()->withHelpers(\n    shared_path('Helpers'),\n    '/app/Containers/ExampleSection/ExampleContainer/Helpers',\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"migrations",children:"withMigrations"}),"\n",(0,a.jsx)(n.p,{children:"Registers migration paths."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()->withMigrations(\n    shared_path('Migrations'),\n    '/app/Containers/ExampleSection/ExampleContainer/Data/Migrations',\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"component-configuration-methods",children:"Component Configuration Methods"}),"\n",(0,a.jsx)(n.p,{children:"These methods accept optional callbacks for advanced configuration:"}),"\n",(0,a.jsx)(n.h3,{id:"providers",children:"withProviders"}),"\n",(0,a.jsx)(n.p,{children:"Configures service provider loading."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withProviders(\n        function (\\Apiato\\Foundation\\Configuration\\Provider $provider) {\n            $provider->loadFrom(\n                shared_path('Providers'),\n                '/app/Containers/ExampleSection/ExampleContainer/Providers',\n            );\n\n            $provider->replace([\n                OldProvider::class => NewProvider::class,\n            ]);\n\n            $provider->merge([\n                CustomProvider::class,\n            ]);\n\n            $provider->except([\n                UnwantedProvider::class,\n            ]);\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"seeders",children:"withSeeders"}),"\n",(0,a.jsx)(n.p,{children:"Configures database seeder loading."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withSeeders(\n        function (\\Apiato\\Foundation\\Configuration\\Seeding $seeding) {\n            $seeding->loadFrom(\n                '/app/Containers/ExampleSection/ExampleContainer/Data/Seeders',\n            );\n\n            // Custom seeder sorting\n            $seeding->sortUsing(function (array $classMapGroupedByDirectory) {\n                // Custom sorting logic\n                return $sortedClassNames;\n            });\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"withtranslations",children:"withTranslations"}),"\n",(0,a.jsx)(n.p,{children:"Configures translation loading."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withTranslations(\n        function (\\Apiato\\Foundation\\Configuration\\Localization $localization) {\n            $localization->loadFrom(\n                shared_path('Languages'),\n                '/app/Containers/ExampleSection/ExampleContainer/Languages',\n            );\n\n            // Custom namespace builder\n            $localization->buildNamespaceUsing(function (string $path) {\n                return $namespace;\n            });\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"views",children:"withViews"}),"\n",(0,a.jsx)(n.p,{children:"Configures view loading."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withViews(\n        function (\\Apiato\\Foundation\\Configuration\\View $view) {\n            $view->loadFrom(\n                shared_path('Views'),\n                shared_path('Mails/Templates'),\n                '/app/Containers/ExampleSection/ExampleContainer/UI/WEB/Views',\n            );\n\n            // Custom namespace builder\n            $view->buildNamespaceUsing(function (string $path) {\n                return $namespace;\n            });\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"routing",children:"withRouting"}),"\n",(0,a.jsx)(n.p,{children:"Configures API and web routing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withRouting(\n        function (\\Apiato\\Foundation\\Configuration\\Routing $routing) {\n            $routing->prefixApiUrlsWith('api/')\n                ->loadApiRoutesFrom('/app/Containers/ExampleSection/ExampleContainer/UI/API/Routes')\n                ->loadWebRoutesFrom('/app/Containers/ExampleSection/ExampleContainer/UI/WEB/Routes');\n\n            // Disable API version auto-prefixing\n            $routing->disableApiVersionAutoPrefix();\n\n            // Custom API version resolver\n            $routing->resolveApiVersionUsing(function (string $file) {\n                return $version;\n            });\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"factories",children:"withFactories"}),"\n",(0,a.jsx)(n.p,{children:"Configures model factory resolution."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withFactories(\n        function (\\Apiato\\Foundation\\Configuration\\Factory $factory) {\n            $factory->resolveFactoryNameUsing(function (string $modelName) {\n                return $factoryClassName;\n            });\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"repositories",children:"withRepositories"}),"\n",(0,a.jsx)(n.p,{children:"Configures repository-model binding."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"Apiato::configure()\n    ->withRepositories(\n        function (\\Apiato\\Foundation\\Configuration\\Repository $repository) {\n            $repository->resolveModelNameUsing(function (string $repositoryName) {\n                return $modelClassName;\n            });\n        },\n    );\n"})}),"\n",(0,a.jsx)(n.h3,{id:"create",children:"create"}),"\n",(0,a.jsx)(n.p,{children:"Finalizes the configuration and returns the Apiato instance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$apiato = Apiato::configure()->create();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"$basePath = dirname(__DIR__);\n\n$apiato = Apiato::configure(basePath: $basePath)\n    ->useSharedPath(join_paths($basePath, 'app/Ship'))\n    ->withConfigs(\n        shared_path('Configs'),\n        ...glob($basePath . '/app/Containers/*/*/Configs', GLOB_ONLYDIR)\n    )->withRouting(function (Routing $routing) use ($basePath) {\n        $routing->prefixApiUrlsWith('api/')\n            ->loadApiRoutesFrom(\n                ...glob($basePath . '/app/Containers/*/*/UI/API/Routes', GLOB_ONLYDIR)\n            )\n            ->loadWebRoutesFrom(\n                ...glob($basePath . '/app/Containers/*/*/UI/WEB/Routes', GLOB_ONLYDIR)\n            );\n    })->withFactories()\n    ->create();\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);