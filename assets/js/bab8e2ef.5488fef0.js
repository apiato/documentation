"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[59402],{28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var i=t(96540);const o={},a=i.createContext(o);function s(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(a.Provider,{value:e},n.children)}},78019:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"components/main-components/actions","title":"Actions","description":"Actions serve as the embodiment of the application\'s Use Cases,","source":"@site/docs/components/main-components/actions.md","sourceDirName":"components/main-components","slug":"/components/main-components/actions","permalink":"/docs/next/components/main-components/actions","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/docs/components/main-components/actions.md","tags":[{"inline":true,"label":"component","permalink":"/docs/next/tags/component"},{"inline":true,"label":"main-component","permalink":"/docs/next/tags/main-component"},{"inline":true,"label":"action","permalink":"/docs/next/tags/action"},{"inline":true,"label":"controller","permalink":"/docs/next/tags/controller"},{"inline":true,"label":"request","permalink":"/docs/next/tags/request"}],"version":"current","lastUpdatedBy":"Mohammad Alavi","lastUpdatedAt":1746631000000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Actions","tags":["component","main-component","action","controller","request"]},"sidebar":"tutorialSidebar","previous":{"title":"Requests","permalink":"/docs/next/components/main-components/requests"},"next":{"title":"Tasks","permalink":"/docs/next/components/main-components/tasks"}}');var o=t(74848),a=t(28453);const s={sidebar_position:4,title:"Actions",tags:["component","main-component","action","controller","request"]},c=void 0,r={},l=[{value:"Definition and Principles",id:"definition-and-principles",level:2},{value:"Rules",id:"rules",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Calling multiple Tasks",id:"calling-multiple-tasks",level:4},{value:"Handling Transactions",id:"handling-transactions",level:2}];function d(n){const e={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Actions serve as the embodiment of the application's Use Cases,\nencapsulating the various operations that users or software can execute within the application."}),"\n",(0,o.jsxs)(e.p,{children:["To generate new actions, you may use the ",(0,o.jsx)(e.code,{children:"apiato:make:action"})," interactive command:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"php artisan apiato:make:action\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Additionally, to retrieve a list of the existing actions in your Apiato application,\nuse the ",(0,o.jsx)(e.code,{children:"apiato:list:actions"})," command."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-shell",children:"php artisan apiato:list:actions\n"})}),"\n",(0,o.jsx)(e.h2,{id:"definition-and-principles",children:"Definition and Principles"}),"\n",(0,o.jsxs)(e.p,{children:["Read ",(0,o.jsx)(e.a,{href:"https://mahmoudz.github.io/Porto/docs/category/main-components",children:(0,o.jsx)(e.strong,{children:"Porto SAP Documentation (#Actions)"})}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"rules",children:"Rules"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["All Actions:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["MUST be placed in the ",(0,o.jsx)(e.code,{children:"app/Containers/{Section}/{Container}/Actions"})," directory."]}),"\n",(0,o.jsxs)(e.li,{children:["MUST extend the ",(0,o.jsx)(e.code,{children:"App\\Ship\\Parents\\Actions\\Action"})," class.","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["The parent extension SHOULD be aliased as ",(0,o.jsx)(e.code,{children:"ParentAction"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.li,{children:"The same Action MAY be called by multiple Controllers (API, Web, CLI)"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-markdown",children:"app\n\u2514\u2500\u2500 Containers\n    \u2514\u2500\u2500 Section\n        \u2514\u2500\u2500 Container\n            \u2514\u2500\u2500 Actions\n                \u251c\u2500\u2500 CreateResourceAction.php\n                \u251c\u2500\u2500 DeleteResourceAction.php\n                \u2514\u2500\u2500 ...\n"})}),"\n",(0,o.jsx)(e.h2,{id:"code-example",children:"Code Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"use App\\Ship\\Parents\\Actions\\Action as ParentAction;\n\nclass DemoAction extends ParentAction\n{\n    public function __construct(\n        private readonly DemoTask $demoTask\n    ) {\n    }\n\n    public function run(DemoRequest $request)\n    {\n        return $this->demoTask->run();\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h4,{id:"calling-multiple-tasks",children:"Calling multiple Tasks"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"use App\\Ship\\Parents\\Actions\\Action as ParentAction;\n\nclass DemoAction extends ParentAction\n{\n    public function __construct(\n        private readonly DemoATask $demoATask,\n        private readonly DemoBTask $demoBTask\n    ) {\n    }\n    \n    public function run($xxx, $yyy, $zzz): void\n    {\n        $foo = $this->demoATask->run($xxx, $yyy);\n        $bar = $this->demoBTask->run($zzz);\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"handling-transactions",children:"Handling Transactions"}),"\n",(0,o.jsxs)(e.p,{children:["In certain scenarios, you may need to wrap a specific call within a ",(0,o.jsx)(e.code,{children:"Database Transaction"})," to ensure data integrity\n(see ",(0,o.jsx)(e.a,{href:"https://laravel.com/docs/master/database#database-transactions",children:"Laravel Documentation"}),")."]}),"\n",(0,o.jsxs)(e.p,{children:["Apiato offers a ",(0,o.jsx)(e.code,{children:"transactionalRun"})," method,\nwhich internally wraps the ",(0,o.jsx)(e.code,{children:"run"})," method of the action within a ",(0,o.jsx)(e.code,{children:"DB::Transaction"}),' and passes all the parameters "as is"\nto it.']}),"\n",(0,o.jsxs)(e.p,{children:["The beauty of using the ",(0,o.jsx)(e.code,{children:"transactionalRun"})," method is\nthat if any ",(0,o.jsx)(e.code,{children:"Exception"})," occurs during the execution of the ",(0,o.jsx)(e.code,{children:"run"})," method,\neverything performed in this context is automatically rolled back from the database.\nHowever, it's important to note that not all operations may be automatically rolled back.\nFor example, file system operations,\nsuch as uploading an image, are typically not covered by the database transaction and would need to be handled manually."]})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);