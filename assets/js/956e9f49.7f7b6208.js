"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[6702],{58140:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=o(74848),r=o(28453);const s={title:"Exceptions"},t=void 0,c={id:"optional-components/exceptions",title:"Exceptions",description:"* Definition",source:"@site/versioned_docs/version-9.x/optional-components/exceptions.md",sourceDirName:"optional-components",slug:"/optional-components/exceptions",permalink:"/docs/9.x/optional-components/exceptions",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/exceptions.md",tags:[],version:"9.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1618096631e3,frontMatter:{title:"Exceptions"},sidebar:"docs",previous:{title:"Repositories",permalink:"/docs/9.x/optional-components/repositories"},next:{title:"Criterias",permalink:"/docs/9.x/optional-components/criterias"}},l={},d=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"Application Error Codes",id:"application-error-codes",level:3},{value:"Linking Exceptions and Error Codes",id:"linking-exceptions-and-error-codes",level:4},{value:"Defining Own Error Code Tables",id:"defining-own-error-code-tables",level:4}];function a(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#definition",children:"Definition"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#code-samples",children:"Code Samples"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#application-error-codes",children:"Application Error Codes"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.p,{children:"Exceptions are classes the handles errors, and helps developers debug their code in a more efficient way."}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exceptions can be thrown from anywhere in the application."}),"\n",(0,i.jsxs)(n.li,{children:["Exceptions SHOULD be created inside the Containers. However, general Exceptions CAN be created in the ",(0,i.jsx)(n.code,{children:"Ship"})," layer."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All Exceptions MUST extend ",(0,i.jsx)(n.code,{children:"App\\Ship\\Parents\\Exceptions\\Exception"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Shared (general) Exceptions between all Containers SHOULD be created in the ",(0,i.jsx)(n.strong,{children:"Exceptions Ship"})," folder (",(0,i.jsx)(n.code,{children:"app/Ship/Exceptions/*"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Every Exception SHOULD have two properties ",(0,i.jsx)(n.code,{children:"httpStatusCode"})," and ",(0,i.jsx)(n.code,{children:"message"}),", both properties will be displayed when an error occurs. You can override those values while throwing the error."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" - App\n    - Containers\n        - {container-name}\n            - Exceptions\n                - AccountFailedException.php\n                - ...\n\n    - Ship\n        - Exceptions\n            - IncorrectIdException.php\n            - InternalErrorException.php\n            - ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"code-samples",children:"Code Samples"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["User ",(0,i.jsx)(n.code,{children:"Exception"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Containers\\User\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AccountFailedException extends Exception\n{\n    public $httpStatusCode = Response::HTTP_CONFLICT;\n\n    public $message = 'Failed creating new User.';\n    \n    public $code = 4711;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["General ",(0,i.jsx)(n.code,{children:"Exception"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Ship\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response as SymfonyResponse;\n\nclass InternalErrorException extends Exception\n{\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["General ",(0,i.jsx)(n.code,{children:"Exception"})," with CustomData:"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Ship\\Exceptions;\n\nuse App\\Ship\\Parents\\Exceptions\\Exception;\nuse Symfony\\Component\\HttpFoundation\\Response as SymfonyResponse;\n\nclass AwesomeExceptionWithCustomData extends Exception\n{\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n    \n    public $code = 1234;\n    \n    /*\n     * Everything you add here will be automatically added to the ExceptionFormatter on the top level!\n     * You can define any structure you want or maybe include translated messages\n     */\n    public function addCustomData() {\n        return [\n            'title' => 'nice',\n            'description' => 'one fancy description here',\n            'foo' => true,\n            'meta' => [\n                'bar' => 1234,\n            ]\n        ];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exception usage from anywhere:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nthrow new AccountFailedException();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage with Log for Debugging:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nthrow (new AccountFailedException())->debug($e); // debug() accepts string or \\Exception instance\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Usage and overriding the default ",(0,i.jsx)(n.code,{children:"message"}),":"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nthrow new AccountFailedException('I am the message to be displayed for the user');\n\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage and overwriting pre-set CustomData"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nthrow (new AwesomeExceptionWithCustomData())->overrideCustomData(['foo' => 'bar']);\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"application-error-codes",children:"Application Error Codes"}),"\n",(0,i.jsxs)(n.p,{children:["Apiato provides a convenient way to manage all ",(0,i.jsx)(n.code,{children:"application error codes"})," in one central place. Therefore, Apiato provides, amongst others, the ",(0,i.jsx)(n.code,{children:"\\App\\Ship\\Exceptions\\Codes\\ApplicationErrorCodesTable"})," class, which already holds various information for multiple errors."]}),"\n",(0,i.jsx)(n.p,{children:"Thereby, one error look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"const BASE_GENERAL_ERROR = [\n\t'code' => 1001,\n\t'title' => 'Unknown / Unspecified Error.',\n\t'description' => 'Something unexpected happened.',\n];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"code"})," is used to be sent back to the client. The ",(0,i.jsx)(n.code,{children:"title"})," and ",(0,i.jsx)(n.code,{children:"description"}),", however, can be used to automatically generate a documentation regarding all defined error codes and their meaning. Please note that this feature is currently not implemented but will be added later on."]}),"\n",(0,i.jsx)(n.h4,{id:"linking-exceptions-and-error-codes",children:"Linking Exceptions and Error Codes"}),"\n",(0,i.jsxs)(n.p,{children:["In order to link an ",(0,i.jsx)(n.code,{children:"error code"})," to an ",(0,i.jsx)(n.code,{children:"Exception"}),", you simply need override the ",(0,i.jsx)(n.code,{children:"useErrorCode()"})," method of the ",(0,i.jsx)(n.code,{children:"Exception"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Consider the following example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class InternalErrorException extends Exception\n{\n\n    public $httpStatusCode = SymfonyResponse::HTTP_INTERNAL_SERVER_ERROR;\n\n    public $message = 'Something went wrong!';\n\t\n\tpublic code = 4711; // this code will be overwritten by the useErrorCode() method!\n\n    public function useErrorCode()\n    {\n        return ApplicationErrorCodes::BASE_INTERNAL_ERROR;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Please note that already defined ",(0,i.jsx)(n.code,{children:"$code"})," values may be overwritten by the ",(0,i.jsx)(n.code,{children:"useErrorCode()"})," method! Furthermore, this feature is completely optional - you may still use the known ",(0,i.jsx)(n.code,{children:"public $code = 4711;"})," approach to manually set an error code."]}),"\n",(0,i.jsx)(n.h4,{id:"defining-own-error-code-tables",children:"Defining Own Error Code Tables"}),"\n",(0,i.jsxs)(n.p,{children:["Of course, Apiato allows you to define your own ",(0,i.jsx)(n.code,{children:"CustomErrorCodesTable"}),". In fact, there already exists such a file where you can define your own error codes. Please note that the ",(0,i.jsx)(n.code,{children:"ApplicationErrorCodesTable"})," may be adapted by Apiato - the others will not."]}),"\n",(0,i.jsxs)(n.p,{children:["If you like to split the errors in various files, you can easily create a ",(0,i.jsx)(n.code,{children:"UserErrorCodesTable"}),' in respective namespace and define the errors accordingly. However, you need to manually "register" this code table. This can be achieved in the ',(0,i.jsx)(n.code,{children:"ErrorCodeManager::getCodeTables()"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["Now you can easily use your ",(0,i.jsx)(n.code,{children:"UserErrorCodesTable::USER_NOT_VERIFIED"})," error in your ",(0,i.jsx)(n.code,{children:"Exception"})," class."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>c});var i=o(96540);const r={},s=i.createContext(r);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);