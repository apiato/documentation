"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2970],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Jobs"},i=void 0,l={unversionedId:"optional-components/jobs",id:"version-9.x/optional-components/jobs",title:"Jobs",description:"* Definition",source:"@site/versioned_docs/version-9.x/optional-components/jobs.md",sourceDirName:"optional-components",slug:"/optional-components/jobs",permalink:"/docs/9.x/optional-components/jobs",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/jobs.md",tags:[],version:"9.x",lastUpdatedBy:"Mehrdad Amini",lastUpdatedAt:1687327943,formattedLastUpdatedAt:"Jun 21, 2023",frontMatter:{title:"Jobs"},sidebar:"version-9.x/docs",previous:{title:"Commands",permalink:"/docs/9.x/optional-components/commands"},next:{title:"Languages",permalink:"/docs/9.x/optional-components/languages"}},s={},p=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"Execute Jobs Execution",id:"execute-jobs-execution",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#definition"},"Definition")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#principles"},"Principles")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#rules"},"Rules")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#execute-jobs-execution"},"Execute Jobs Execution"))),(0,a.kt)("h3",{id:"definition"},"Definition"),(0,a.kt)("p",null,"Jobs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"are simple classes that can do one thing or multiple related things. "),(0,a.kt)("li",{parentName:"ul"},"Job is a name given to a class that is usually created to be queued (it's execution is usually deferred for later, after the execution of previous Jobs are completed)."),(0,a.kt)("li",{parentName:"ul"},"Jobs can be scheduled to be executed later by a queuing mechanism (queue system like beanstalkd)."),(0,a.kt)("li",{parentName:"ul"},"When a Job class is dispatched, it performs its specific job and dies."),(0,a.kt)("li",{parentName:"ul"},"Laravel's queue worker will process every Job as it's pushed onto the queue.")),(0,a.kt)("p",null,"More info ",(0,a.kt)("a",{parentName:"p",href:"https://laravel.com/docs/queues"},"here"),"."),(0,a.kt)("h3",{id:"principles"},"Principles"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A Container MAY have more than one Job.")),(0,a.kt)("h3",{id:"rules"},"Rules"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"All Jobs MUST extend from ",(0,a.kt)("inlineCode",{parentName:"li"},"App\\Ship\\Parents\\Jobs\\Job"),".")),(0,a.kt)("h3",{id:"folder-structure"},"Folder Structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," - app\n    - Containers\n        - {container-name}\n            - Jobs\n                - DoSomethingJob.php\n                - DoSomethingElseJob.php\n")),(0,a.kt)("h3",{id:"code-samples"},"Code Samples"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"CreateAndValidateAddress with third party ",(0,a.kt)("inlineCode",{parentName:"strong"},"Job"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\Shipment\\Jobs;\n\nuse App\\Port\\Job\\Abstracts\\Job;\n\nclass CreateAndValidateAddressJob extends Job\n{\n    private $recipients;\n\n    public function __construct(array $recipients)\n    {\n        $this->recipients = $recipients;\n    }\n\n    public function handle()\n    {\n        foreach ($this->recipients as $recipient) {\n            // do whatever you like\n        }\n    }\n}\n")),(0,a.kt)("p",null,"Check the parent Job class."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Usage from ",(0,a.kt)("inlineCode",{parentName:"strong"},"Action"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// using helper function\ndispatch(new CreateAndValidateAddressJob($recipients));\n\n// manually\nApp::make(\\Illuminate\\Contracts\\Bus\\Dispatcher\\Dispatcher::class)->dispatch(New StatusChangedJob($object));\n")),(0,a.kt)("h3",{id:"execute-jobs-execution"},"Execute Jobs Execution"),(0,a.kt)("p",null,"For running your Jobs checkout the ",(0,a.kt)("a",{parentName:"p",href:".././miscellaneous/tasks-queuing"},"Tasks Queuing")," page."))}d.isMDXComponent=!0}}]);