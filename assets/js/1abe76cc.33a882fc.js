"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8247],{15680:(e,a,r)=>{r.d(a,{xA:()=>u,yg:()=>g});var n=r(96540);function t(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){t(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,n,t=function(e,a){if(null==e)return{};var r,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||(t[r]=e[r]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=n.createContext({}),p=function(e){var a=n.useContext(s),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},u=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var r=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),y=p(r),c=t,g=y["".concat(s,".").concat(c)]||y[c]||d[c]||o;return r?n.createElement(g,l(l({ref:a},u),{},{components:r})):n.createElement(g,l({ref:a},u))}));function g(e,a){var r=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[y]="string"==typeof e?e:t,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},41188:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(58168),t=(r(96540),r(15680));const o={title:"Responses"},l=void 0,i={unversionedId:"getting-started/responses",id:"version-9.x/getting-started/responses",title:"Responses",description:"* Apiato Response",source:"@site/versioned_docs/version-9.x/getting-started/responses.md",sourceDirName:"getting-started",slug:"/getting-started/responses",permalink:"/docs/9.x/getting-started/responses",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/getting-started/responses.md",tags:[],version:"9.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1618748235,formattedLastUpdatedAt:"Apr 18, 2021",frontMatter:{title:"Responses"},sidebar:"version-9.x/docs",previous:{title:"Requests",permalink:"/docs/9.x/getting-started/requests"},next:{title:"Software Architectural Patterns",permalink:"/docs/9.x/getting-started/software-architectural-patterns"}},s={},p=[{value:"Apiato Response",id:"response",level:3},{value:"Default Apiato Responses Payload:",id:"default-response-payload",level:3},{value:"Change the default Response payload:",id:"change-default-response-payload",level:3},{value:"Resource Keys",id:"resource-keys",level:3},{value:"For JsonApiSerializer.",id:"resource-keys-for-json-api-serializer",level:4},{value:"For DataArraySerializer.",id:"resource-keys-for-data-array-serializer",level:4},{value:"Error Responses formats",id:"error-response-formats",level:3},{value:"Building a Responses from the Controller:",id:"building-response-from-controller",level:2}],u={toc:p},y="wrapper";function d(e){let{components:a,...r}=e;return(0,t.yg)(y,(0,n.A)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#response"},"Apiato Response")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#default-response-payload"},"Default Apiato Responses Payload")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#change-default-response-payload"},"Change the default Response payload")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#resource-keys"},"Resource Keys")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#error-response-formats"},"Error Responses formats")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#building-response-from-controller"},"Building a Responses from the Controller"))),(0,t.yg)("h3",{id:"response"},"Apiato Response"),(0,t.yg)("p",null,"In Apiato you can define your own response payload or use one of the supported serializers."),(0,t.yg)("p",null,"Currently, the supported serializers are (",(0,t.yg)("inlineCode",{parentName:"p"},"ArraySerializer"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"DataArraySerializer")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"JsonApiSerializer"),"). As provided\nby ",(0,t.yg)("a",{parentName:"p",href:"http://fractal.thephpleague.com/transformers/"},"Fractal"),"."),(0,t.yg)("p",null,"By default, Apiato uses ",(0,t.yg)("inlineCode",{parentName:"p"},"DataArraySerializer"),". Below is an example of the response payload."),(0,t.yg)("h3",{id:"default-response-payload"},"Default Apiato Responses Payload:"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"DataArraySerializer")," response payload looks like this:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 100,\n      ...\n      "relation 1": {\n        "data": [ // multiple data\n          {\n            "id": 11,\n              ...\n          }\n        ]\n      },\n      "relation 2": {\n        "data": { // single data\n          "id": 22,\n          ...\n          }\n        }\n      }\n    },\n    ...\n  ],\n  "meta": {\n    "pagination": {\n      "total": 999,\n      "count": 999,\n      "per_page": 999,\n      "current_page": 999,\n      "total_pages": 999,\n      "links": {\n        "next": "http://api.apiato.test/v1/accounts?page=999"\n      }\n    }\n  },\n  "include": [ // what can be included\n    "xxx",\n    "yyy"\n  ],\n  "custom": []\n}\n')),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Paginated response:")),(0,t.yg)("p",null,"When data is paginated the response payload will contain a ",(0,t.yg)("inlineCode",{parentName:"p"},"meta")," description about the pagination."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "meta": {\n    "pagination": {\n      "total": 999,\n      "count": 999,\n      "per_page": 999,\n      "current_page": 999,\n      "total_pages": 999,\n      "links": {\n        "next": "http://api.apiato.test/v1/accounts?page=999"\n      }\n    }\n  },\n  "include": [ // what can be included\n    "xxx",\n    "yyy"\n  ],\n  "custom": []\n}\n')),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Includes:")),(0,t.yg)("p",null,"Informs the User about what relationships can be included in the response. Example: ",(0,t.yg)("inlineCode",{parentName:"p"},"?include=tags,user")),(0,t.yg)("p",null,"For more details read the ",(0,t.yg)("inlineCode",{parentName:"p"},"Relationships")," section in the ",(0,t.yg)("a",{parentName:"p",href:"../core-features/query-parameters"},"Query Parameters")," page."),(0,t.yg)("h3",{id:"change-default-response-payload"},"Change the default Response payload:"),(0,t.yg)("p",null,"The default response format (specification) is the ",(0,t.yg)("inlineCode",{parentName:"p"},"DataArray")," Fractal Serializer (",(0,t.yg)("inlineCode",{parentName:"p"},"League\\Fractal\\Serializer\\DataArraySerializer"),")."),(0,t.yg)("p",null,"To change the default Fractal Serializer open the ",(0,t.yg)("inlineCode",{parentName:"p"},"app/Ship/Configs/fractal.php")," file and change the"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-text"},"'default_serializer' => League\\Fractal\\Serializer\\DataArraySerializer::class,\n")),(0,t.yg)("p",null,"The Supported Serializers are"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ArraySerializer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"DataArraySerializer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"JsonApiSerializer"))),(0,t.yg)("p",null,"More details can be found at ",(0,t.yg)("a",{parentName:"p",href:"http://fractal.thephpleague.com/transformers/"},"Fractal")," and\n",(0,t.yg)("a",{parentName:"p",href:"https://github.com/spatie/laravel-fractal"},"Laravel Fractal Wrapper"),"."),(0,t.yg)("p",null,"In case of returning JSON Data (",(0,t.yg)("inlineCode",{parentName:"p"},"JsonApiSerializer"),"), you may wish to check some JSON response standards:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://labs.omniti.com/labs/jsend"},"JSEND")," (very basic)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"http://jsonapi.org/format/"},"JSON API")," (very popular and well documented)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"http://stateless.co/hal_specification.html"},"HAL")," (useful in case of hypermedia)")),(0,t.yg)("h3",{id:"resource-keys"},"Resource Keys"),(0,t.yg)("h4",{id:"resource-keys-for-json-api-serializer"},"For JsonApiSerializer."),(0,t.yg)("p",null,"The transformer allows appending a ",(0,t.yg)("inlineCode",{parentName:"p"},"ResourceKey")," to the transformed resource. You can set the ",(0,t.yg)("inlineCode",{parentName:"p"},"ResourceKey")," in your\nresponse payload in 2 ways:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"Manually set it via the respective parameter in the ",(0,t.yg)("inlineCode",{parentName:"li"},"$this->transform()")," call. Note that this will only set the\n",(0,t.yg)("inlineCode",{parentName:"li"},"top level")," resource key and does not affect the resource keys from ",(0,t.yg)("inlineCode",{parentName:"li"},"included")," resources!"),(0,t.yg)("li",{parentName:"ol"},"Specify it on the respective ",(0,t.yg)("inlineCode",{parentName:"li"},"Model"),". By overriding $resourceKey, (",(0,t.yg)("inlineCode",{parentName:"li"},"protected $resourceKey = 'FooBar';"),").\nIf no ",(0,t.yg)("inlineCode",{parentName:"li"},"$resourceKey")," is defined at the ",(0,t.yg)("inlineCode",{parentName:"li"},"Model"),", the ",(0,t.yg)("inlineCode",{parentName:"li"},"ShortClassName")," is used as key. For example, the ",(0,t.yg)("inlineCode",{parentName:"li"},"ShortClassName")," of\nthe ",(0,t.yg)("inlineCode",{parentName:"li"},"App\\Containers\\User\\Models\\User::class")," is ",(0,t.yg)("inlineCode",{parentName:"li"},"User"),".")),(0,t.yg)("h4",{id:"resource-keys-for-data-array-serializer"},"For DataArraySerializer."),(0,t.yg)("p",null,"By default, the ",(0,t.yg)("inlineCode",{parentName:"p"},"object")," keyword is used as a resource key for each response, and it's set manually in each transformer,\n",(0,t.yg)("em",{parentName:"p"},"to be automated later"),"."),(0,t.yg)("h3",{id:"error-response-formats"},"Error Responses formats"),(0,t.yg)("p",null,"Visit each feature, example the Authentication and there you will see how an unauthenticated response looks like, same\nfor Authorization, Validation and so on."),(0,t.yg)("h2",{id:"building-response-from-controller"},"Building a Responses from the Controller:"),(0,t.yg)("p",null,"Checkout the ",(0,t.yg)("a",{parentName:"p",href:".././main-components/controllers"},"Controller response builder helper functions"),"."))}d.isMDXComponent=!0}}]);