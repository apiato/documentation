"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[1849],{42617:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting-started/conventions-and-principles","title":"Conventions","description":"* HTTP Methods usage in RESTful API\'s","source":"@site/versioned_docs/version-11.x/getting-started/conventions-and-principles.md","sourceDirName":"getting-started","slug":"/getting-started/conventions-and-principles","permalink":"/docs/11.x/getting-started/conventions-and-principles","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/getting-started/conventions-and-principles.md","tags":[],"version":"11.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1659346629000,"frontMatter":{"title":"Conventions"},"sidebar":"docs","previous":{"title":"Responses","permalink":"/docs/11.x/getting-started/responses"},"next":{"title":"Container Installer","permalink":"/docs/11.x/getting-started/container-installer"}}');var r=s(74848),t=s(28453);const l={title:"Conventions"},o=void 0,a={},c=[{value:"HTTP Methods usage in RESTful API&#39;s",id:"http-methods-usage-in-restful-apis",level:3},{value:"Naming Conventions for Routes &amp; Actions",id:"naming-conventions-for-routes-and-actions",level:3},{value:"General guidelines and principles for RESTful URLs",id:"general-guidelines-and-principles-for-restful-urls",level:3},{value:"Good URL examples",id:"good-url-examples",level:3},{value:"General principles for HTTP methods",id:"general-principles-for-http-methods",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#http-methods-usage-in-restful-apis",children:"HTTP Methods usage in RESTful API's"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#naming-conventions-for-routes-and-actions",children:"Naming Conventions for Routes & Actions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#general-guidelines-and-principles-for-restful-urls",children:"General guidelines and principles for RESTful URLs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#good-url-examples",children:"Good URL examples"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#general-principles-for-http-methods",children:"General principles for HTTP methods"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"http-methods-usage-in-restful-apis",children:"HTTP Methods usage in RESTful API's"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"GET (SELECT): retrieve a specific resource from the server, or a listing of resources."}),"\n",(0,r.jsx)(n.li,{children:"POST (CREATE): create a new resource on the server."}),"\n",(0,r.jsx)(n.li,{children:"PUT (UPDATE): update a resource on the server, providing the entire resource."}),"\n",(0,r.jsx)(n.li,{children:"PATCH (UPDATE): update a resource on the server, providing only changed attributes."}),"\n",(0,r.jsx)(n.li,{children:"DELETE (DELETE): remove a resource from the server."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"naming-conventions-for-routes-and-actions",children:"Naming Conventions for Routes & Actions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GetAllResource"}),": to fetch all resources."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FindResourceByID"}),": to search for single resource by its unique identifier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CreateResource"}),": to create a new resource."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UpdateResource"}),": to update/edit existing resource."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DeleteResource"}),": to delete a resource."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"general-guidelines-and-principles-for-restful-urls",children:"General guidelines and principles for RESTful URLs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A URL identifies a resource."}),"\n",(0,r.jsx)(n.li,{children:"URLs should include nouns, not verbs."}),"\n",(0,r.jsx)(n.li,{children:"Use plural nouns only for consistency (no singular nouns)."}),"\n",(0,r.jsx)(n.li,{children:"Use HTTP verbs (GET, POST, PUT, DELETE) to operate on the collections and elements."}),"\n",(0,r.jsx)(n.li,{children:"You should not need to go deeper than resource/identifier/resource."}),"\n",(0,r.jsxs)(n.li,{children:["Put the version number at the base of your URL, for example ",(0,r.jsx)(n.code,{children:"http://apiato.test/v1/path/to/resource"}),"."]}),"\n",(0,r.jsx)(n.li,{children:'If an input data changes the logic of the endpoint, it should be passed in the URL. If not can go in the header "like Auth Token".'}),"\n",(0,r.jsx)(n.li,{children:"Don't use query parameters to alter state."}),"\n",(0,r.jsx)(n.li,{children:"Don't use mixed-case paths if you can help it; lowercase is best."}),"\n",(0,r.jsx)(n.li,{children:"Don't use implementation-specific extensions in your URIs (.php, .py, .pl, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Limit your URI space as much as possible. And keep path segments short."}),"\n",(0,r.jsx)(n.li,{children:"Don't put metadata in the body of a response that should be in a header"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"good-url-examples",children:"Good URL examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Find a single Car by its unique identifier (ID):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars/123"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Get all Cars:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Find/Search cars by one or more fields:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars?search=maker:mercedes"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars?search=maker:mercedes;color:white"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Order and Sort query result:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars?orderBy=created_at&sortedBy=desc"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars?search=maker:mercedes&orderBy=created_at&sortedBy=desc"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Specify optional fields:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars?filter=id;name;status"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars/123?filter=id;name;status"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Get all Drivers belonging to a Car:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars/123/drivers"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars/123/drivers/123/addresses"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Include Drivers objects relationship with the car response:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars/123?include=drivers"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"GET http://www.api.apiato.test/v1/cars/123?include=drivers,owner"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Add new Car:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"POST http://www.api.apiato.test/v1/cars"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Add new Driver to a Car:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"POST http://www.api.apiato.test/v1/cars/123/drivers"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"general-principles-for-http-methods",children:"General principles for HTTP methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Don't ever use GET to alter state; to prevent Googlebot from corrupting your data. And use GET as much as possible."}),"\n",(0,r.jsx)(n.li,{children:"Don't use PUT unless you are updating an entire resource. And unless you can also legitimately do a GET on the same URI."}),"\n",(0,r.jsx)(n.li,{children:"Don't use POST to retrieve information that is long-lived or that might be reasonable to cache."}),"\n",(0,r.jsx)(n.li,{children:"Don't perform an operation that is not idempotent with PUT."}),"\n",(0,r.jsx)(n.li,{children:"Use GET for things like calculations, unless your input is large, in which case use POST."}),"\n",(0,r.jsx)(n.li,{children:"Use POST in preference to PUT when in doubt."}),"\n",(0,r.jsx)(n.li,{children:"Use POST whenever you have to do something that feels RPC-like."}),"\n",(0,r.jsx)(n.li,{children:"Use PUT for classes of resources that are larger or hierarchical."}),"\n",(0,r.jsx)(n.li,{children:"Use DELETE in preference to POST to remove resources."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);