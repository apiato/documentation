"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[3879],{7215:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"architecture-concepts/porto","title":"Porto SAP","description":"Apiato is built on the Porto SAP architectural pattern, a design specifically crafted to enhance scalability, maintainability, and reusability. By adopting Porto, Apiato provides a structured, modular way to organize code, which helps developers scale from a simple monolithic setup to complex microservices as the application grows.","source":"@site/versioned_docs/version-12.x/architecture-concepts/porto.md","sourceDirName":"architecture-concepts","slug":"/architecture-concepts/porto","permalink":"/docs/architecture-concepts/porto","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-12.x/architecture-concepts/porto.md","tags":[],"version":"12.x","lastUpdatedBy":"Mahmoud Zalt","lastUpdatedAt":1730085421000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Porto SAP"},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Concepts","permalink":"/docs/architecture-concepts/"},"next":{"title":"Container","permalink":"/docs/architecture-concepts/container"}}');var i=o(74848),r=o(28453);const a={sidebar_position:1,title:"Porto SAP"},s=void 0,c={},l=[{value:"What is Porto SAP?",id:"what-is-porto-sap",level:3},{value:"Understanding the Full Porto Architecture",id:"understanding-the-full-porto-architecture",level:3},{value:"Layers Diagram",id:"layers-diagram",level:3},{value:"Components Diagram",id:"components-diagram",level:3}];function d(e){const t={a:"a",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Apiato is built on the ",(0,i.jsx)(t.a,{href:"https://mahmoudz.github.io/Porto/",children:(0,i.jsx)(t.strong,{children:"Porto SAP"})})," architectural pattern, a design specifically crafted to enhance scalability, maintainability, and reusability. By adopting Porto, Apiato provides a structured, modular way to organize code, which helps developers scale from a simple monolithic setup to complex microservices as the application grows."]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-porto-sap",children:"What is Porto SAP?"}),"\n",(0,i.jsx)(t.p,{children:"Porto SAP (Service Architecture Pattern) is a software architecture designed to bring clarity and structure to large applications. It introduces a well-defined organization for code, divided into two primary layers:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Containers Layer"}),": Houses the core business logic and functionality, with components grouped into modular, independent sections."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Ship Layer"}),": Acts as the foundation, holding shared infrastructure, utilities, and configuration files accessible across Containers."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Porto emphasizes modularity and clean separation of concerns, ensuring each part of the application remains maintainable and reusable."}),"\n",(0,i.jsx)(t.h3,{id:"understanding-the-full-porto-architecture",children:"Understanding the Full Porto Architecture"}),"\n",(0,i.jsxs)(t.p,{children:["For a thorough understanding of Porto's structure and benefits, it\u2019s recommended to explore the ",(0,i.jsx)(t.a,{href:"https://mahmoudz.github.io/Porto/docs/Intro/",children:"Porto Documentation"}),". The documentation covers essential concepts like:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Layers and Components"}),": A deep dive into the Containers and Ship layers, as well as core components (Routes, Actions, Models, Tasks, and more)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Architectural Principles"}),": Learn about the foundational principles Porto follows, such as SOLID, Domain-Driven Design (DDD), and MVC, that enhance Apiato's architecture."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Scalability and Maintainability"}),": Insights into how Porto\u2019s modular approach helps you build applications that can grow and adapt to changing requirements."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Understanding the Porto architecture is highly recommended for anyone developing with Apiato, as it offers a clear blueprint for creating scalable, manageable applications."}),"\n",(0,i.jsx)(t.h3,{id:"layers-diagram",children:"Layers Diagram"}),"\n",(0,i.jsx)("img",{src:"https://raw.githubusercontent.com/Mahmoudz/Porto/refs/heads/master/docs/static/img/diagrams/porto_layers.svg",width:"100%",alt:"Laradock: Full PHP development environment on Docker."}),"\n",(0,i.jsx)(t.h3,{id:"components-diagram",children:"Components Diagram"}),"\n",(0,i.jsx)("img",{src:"https://raw.githubusercontent.com/Mahmoudz/Porto/refs/heads/master/docs/static/img/diagrams/porto_container_interactions.svg",width:"100%",alt:"Laradock: Full PHP development environment on Docker."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var n=o(96540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);