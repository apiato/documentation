"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6614],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const o={title:"Payments"},r=void 0,l={unversionedId:"additional-features/apiato-containers/payments",id:"version-10.x/additional-features/apiato-containers/payments",title:"Payments",description:"- Installation",source:"@site/versioned_docs/version-10.x/additional-features/apiato-containers/payments.md",sourceDirName:"additional-features/apiato-containers",slug:"/additional-features/apiato-containers/payments",permalink:"/docs/10.x/additional-features/apiato-containers/payments",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-10.x/additional-features/apiato-containers/payments.md",tags:[],version:"10.x",lastUpdatedBy:"hossein-moghadam",lastUpdatedAt:1684419989,formattedLastUpdatedAt:"May 18, 2023",frontMatter:{title:"Payments"},sidebar:"version-10.x/docs",previous:{title:"Localization",permalink:"/docs/10.x/additional-features/apiato-containers/localization"},next:{title:"Settings",permalink:"/docs/10.x/additional-features/apiato-containers/settings"}},p={},s=[{value:"Installation",id:"installation",level:2},{value:"Supported Payment Gateways",id:"available-payment-gateways",level:2},{value:"How to charge users",id:"how-to-charge-users",level:2},{value:"Manage Payment Accounts",id:"manage-payment-accounts",level:2},{value:"Payment Transactions",id:"payment-transactions",level:2},{value:"Developing own Payment Gateway Containers",id:"developing-own-payment-gateway-containers",level:2},{value:"Mocking the real payment call for Testing",id:"mocking-the-real-payment-call-for-testing",level:2}],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#available-payment-gateways"},"Available Payment Gateway")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#how-to-charge-users"},"How to charge users")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#manage-payment-accounts"},"Manage Payment Accounts")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#payment-transactions"},"Payment Transactions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#developing-own-payment-gateway-containers"},"Developing own Payment Gateway Containers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mocking-the-real-payment-call-for-testing"},"Mocking the real payment call for Testing"))),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"composer require apiato/payment-container\n")),(0,i.kt)("p",null,"Now run ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate")),(0,i.kt)("h2",{id:"available-payment-gateways"},"Supported Payment Gateways"),(0,i.kt)("p",null,"Currently, Apiato Supports the following payment gateways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Stripe"))),(0,i.kt)("p",null,"If your payment gateway is not supported, build it and contribute your container back."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For any supported gateway you want to use, set Tokens and Secrets in the ",(0,i.kt)("inlineCode",{parentName:"strong"},".env"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"STRIPE_KEY=\nSTRIPE_SECRET=\n")),(0,i.kt)("h2",{id:"how-to-charge-users"},"How to charge users"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"On the Model you want to charge:"),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"App\\Containers\\Payment\\Traits\\ChargeableTrait")),(0,i.kt)("li",{parentName:"ol"},"add the ",(0,i.kt)("inlineCode",{parentName:"li"},"\\App\\Containers\\Payment\\Contracts\\ChargeableInterface")," Interface"),(0,i.kt)("li",{parentName:"ol"},"Then add this relation",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"public function paymentAccounts(): HasMany\n{\n     return $this->hasMany(PaymentAccount::class);\n}\n")))),(0,i.kt)("p",null,"2) To charge a user, the user must first create a payment account (Stripe, PayPal, WePay,...). Use the respective\nendpoints to create those endpoints (",(0,i.kt)("inlineCode",{parentName:"p"},"createStripeAccount"),", ...). A User may have multiple\n",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentAccount"),"."),(0,i.kt)("p",null,"3) Then charge the user like this ",(0,i.kt)("inlineCode",{parentName:"p"},"$user->charge($account, $amount);")," by providing the ",(0,i.kt)("inlineCode",{parentName:"p"},"$account")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"$amount"),"."),(0,i.kt)("p",null,"You can get ",(0,i.kt)("inlineCode",{parentName:"p"},"$account")," from the user this way ",(0,i.kt)("inlineCode",{parentName:"p"},"$user->paymentAccounts"),". This will return a Collection of all the\nuser payment accounts to select one."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// in this example we are selecting a random payment account.\n$acccount = $user->paymentAccounts->first();\n\n$amount = 9.99;\n\n// charge the user with the 'USD' currency\n$user->charge($acccount, $amount, 'USD');\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$user->paymentAccounts")," will return a ",(0,i.kt)("em",{parentName:"p"},"generic")," ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentAccount")," which may be transformed to the dedicated\npayment account (",(0,i.kt)("inlineCode",{parentName:"p"},"StripeAccount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"PaypalAccount"),", ...). You can call the ",(0,i.kt)("inlineCode",{parentName:"p"},"accountable()")," function on the selected\npayment in order to do this. For more information about this, we refer to the\n",(0,i.kt)("a",{parentName:"p",href:"https://laravel.com/docs/eloquent-relationships#polymorphic-relations"},"Polymorphic Relationships")," in the\nofficial Laravel Docs."),(0,i.kt)("h2",{id:"manage-payment-accounts"},"Manage Payment Accounts"),(0,i.kt)("p",null,"Payment contains provides some generic routes in order to allow users to manage their own ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentAccount"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GET /user/paymentaccounts")," : Get all available ",(0,i.kt)("inlineCode",{parentName:"li"},"PaymentAccount"),"s for the current ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GET /user/paymentaccounts/{id}"),": Get the details of one specific ",(0,i.kt)("inlineCode",{parentName:"li"},"PaymentAccount"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PATCH /user/paymentaccounts/{id}"),": Update a ",(0,i.kt)("inlineCode",{parentName:"li"},"PaymentAccount")," (this route does ",(0,i.kt)("strong",{parentName:"li"},"not")," update the credentials for the\ncorresponding payment gateway)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DELETE /user/paymentaccounts/{id}"),": Delete a ",(0,i.kt)("inlineCode",{parentName:"li"},"PaymentAccount")," including the payment gateway details (e.g., user\ncredentials for ",(0,i.kt)("inlineCode",{parentName:"li"},"Stripe"),")."),(0,i.kt)("li",{parentName:"ul"},"To create a payment account use the dedicated endpoint (",(0,i.kt)("inlineCode",{parentName:"li"},"createStripeAccount"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"createWepayAccount"),",...) provided by\nthe payment gateway container (Stripe, WePay,...). Each payment container has its own endpoint to ",(0,i.kt)("inlineCode",{parentName:"li"},"create")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"update")," account details, since each payment requires different data.")),(0,i.kt)("h2",{id:"payment-transactions"},"Payment Transactions"),(0,i.kt)("p",null,"When charging the user with a specific gateway (e.g., Paypal, Stripe, ...), the respective ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," (e.g., the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ChargeWithStripeTask"),") should return a ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentTransaction")," model. This model, in turn,\nshould contain respective information about the transaction that was made. For example, it contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"status"),' (e.g., "paid")\nor a flag indicating if the ',(0,i.kt)("inlineCode",{parentName:"p"},"transaction")," was successfully handled (",(0,i.kt)("inlineCode",{parentName:"p"},"is_successful"),")."),(0,i.kt)("p",null,'Note that some information about the transaction are "pre-filled" by the ',(0,i.kt)("inlineCode",{parentName:"p"},"PaymentGateway")," itself, so you don't need\nto manually do this in your ",(0,i.kt)("inlineCode",{parentName:"p"},"CargeWithXTask"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_id")," : The ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," who started this transaction (i.e., the buyer)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"gateway")," : The gateway that was used for this transaction (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"Stripe"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount")," : The amount the user was charged"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"currency")," : The currency the transaction was executed")),(0,i.kt)("p",null,"Furthermore, the gateways may add the response from the gateway to the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," field of the ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentTransaction"),". The\n",(0,i.kt)("inlineCode",{parentName:"p"},"custom"),' field, however, can be filled by the developer with own "custom" data.'),(0,i.kt)("h2",{id:"developing-own-payment-gateway-containers"},"Developing own Payment Gateway Containers"),(0,i.kt)("admonition",{title:"Instructions",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This container works out of the box perfectly but if you want to change its configs or modify the codes you MUST follow these steps:"),(0,i.kt)("p",{parentName:"admonition"},"1- Copy the container from ",(0,i.kt)("inlineCode",{parentName:"p"},"Vendor")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"AppSection")," (or any of your custom sections) of your project",(0,i.kt)("br",{parentName:"p"}),"\n","2- Fix the namespaces",(0,i.kt)("br",{parentName:"p"}),"\n","3- Remove ",(0,i.kt)("inlineCode",{parentName:"p"},"apiato/payment-container")," dependency from project root composer.json  ")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Payment"),' container acts as generic foundation to "plug in" different containers that interacts with specific\npayment gateways (e.g., ',(0,i.kt)("inlineCode",{parentName:"p"},"PayPal"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Stripe"),", ...). This section introduces, how these containers shall be implemented\nin order to be used via the generic ",(0,i.kt)("inlineCode",{parentName:"p"},"Payment")," container."),(0,i.kt)("p",null,"In this example, we will develop a ",(0,i.kt)("inlineCode",{parentName:"p"},"Foo")," container, that connects to the fictional ",(0,i.kt)("inlineCode",{parentName:"p"},"FooPay")," service. As our service may\nneed to have its own ",(0,i.kt)("inlineCode",{parentName:"p"},"Accounts"),", we will first need to create respective logic to add and update our ",(0,i.kt)("inlineCode",{parentName:"p"},"FooAccount"),".\nImplement respective ",(0,i.kt)("inlineCode",{parentName:"p"},"AddFooAccountAction")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateFooAccountAction")," based on the pre-shipped ",(0,i.kt)("inlineCode",{parentName:"p"},"Stripe")," container."),(0,i.kt)("p",null,"Basically, this provides the feature for the customer to create his own ",(0,i.kt)("inlineCode",{parentName:"p"},"FooAccount")," within your own application. These\nactions must, for example, provide the functionality to store user credentials (e.g., the mail-address of the user for\nthis specific service). Please note that you do not need to provide a dedicated ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE")," task (as this is handled by\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Payment")," container)."),(0,i.kt)("p",null,"The most important functionality of your ",(0,i.kt)("inlineCode",{parentName:"p"},"Foo")," container is how to charge the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," with this service. You, therefore,\nneed to create your own ",(0,i.kt)("inlineCode",{parentName:"p"},"ChargeWithFooTask"),". This class, however, needs to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentChargerInterface"),"\ndistributed via the ",(0,i.kt)("inlineCode",{parentName:"p"},"Payment")," container. This interface, in turn, requires you to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"charge()")," method."),(0,i.kt)("p",null,"This method needs to connect to the ",(0,i.kt)("inlineCode",{parentName:"p"},"FooService"),", create the payment and return a ",(0,i.kt)("inlineCode",{parentName:"p"},"PaymentTransaction")," model."),(0,i.kt)("p",null,"Finally, you need to ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," the new service. This can be done in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Payment\\Configs\\vendor-payment.php")," file.\nFor the ",(0,i.kt)("inlineCode",{parentName:"p"},"vendor-payment.gateways")," key, add the new entry for your ",(0,i.kt)("inlineCode",{parentName:"p"},"Foo")," Payment Gateway. This may look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"    // ...\n    'foo' => [\n        'container'   => 'Foo',\n        'charge_task' => \\App\\Containers\\Foo\\Tasks\\ChargeWithFooTask::class,\n    ],\n    // ...\n")),(0,i.kt)("p",null,"Basically, this entry points to the ",(0,i.kt)("inlineCode",{parentName:"p"},"charger_task")," that handles, how to charge a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," with the specific ",(0,i.kt)("inlineCode",{parentName:"p"},"Payment Gateway"),"."),(0,i.kt)("p",null,"That's all!"),(0,i.kt)("h2",{id:"mocking-the-real-payment-call-for-testing"},"Mocking the real payment call for Testing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// mock the ChargeWithStripeService external API call\n$this->mockIt(ChargeWithStripeService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'stripe',\n   'description' => $payId\n]);\n\n// mock the ChargeWithPaypalService external API call\n$this->mockIt(ChargeWithPaypalService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'paypal',\n   'description' => $payId\n]);\n")),(0,i.kt)("p",null,"Checkout the ",(0,i.kt)("a",{parentName:"p",href:"../../miscellaneous/tests-helpers"},"Tests Helpers")," page for more information about Testing."))}d.isMDXComponent=!0}}]);