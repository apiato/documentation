"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[8578],{12212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=t(74848),o=t(28453);const i={title:"Models"},l=void 0,r={id:"main-components/models",title:"Models",description:"- Definition & Principles",source:"@site/versioned_docs/version-11.x/main-components/models.md",sourceDirName:"main-components",slug:"/main-components/models",permalink:"/docs/11.x/main-components/models",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/main-components/models.md",tags:[],version:"11.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1659346629e3,frontMatter:{title:"Models"},sidebar:"docs",previous:{title:"Tasks",permalink:"/docs/11.x/main-components/tasks"},next:{title:"Views",permalink:"/docs/11.x/main-components/views"}},d={},c=[{value:"Definition &amp; Principles",id:"definition-principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Sample",id:"code-sample",level:3},{value:"Casts",id:"casts",level:3}];function a(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#definition-principles",children:"Definition & Principles"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#code-sample",children:"Code Sample"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#casts",children:"Casts"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"definition-principles",children:"Definition & Principles"}),"\n",(0,s.jsxs)(n.p,{children:["Read ",(0,s.jsx)(n.a,{href:"https://github.com/Mahmoudz/Porto#Models",children:(0,s.jsx)(n.strong,{children:"Porto SAP Documentation (#Models)"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["All Models MUST extend from ",(0,s.jsx)(n.code,{children:"App\\Ship\\Parents\\Models\\Model"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If the name of a model differs from the Container name you have to implement ",(0,s.jsx)(n.code,{children:"model()"})," method in the repository - ",(0,s.jsx)(n.a,{href:"../optional-components/repositories#model-method-example",children:"more details"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:" - App\n    - Containers\n        - {section-name}\n            - {container-name}\n                - Models\n                    - User.php\n                    - UserId.php\n                    - ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"code-sample",children:"Code Sample"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"class Demo extends Model\n{\n    protected $table = 'demos';\n\n    protected $fillable = [\n        'label',\n        'user_id'\n    ];\n\n    protected $hidden = [\n        'token',\n    ];\n\n    protected $casts = [\n        'total_credits'     => 'float',\n    ];\n\n    protected $dates = [\n        'created_at',\n        'updated_at',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(\\App\\Containers\\AppSection\\User\\Models\\User::class);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Notice the Demo Model has a relationship with User Model, which lives in another Container."}),"\n",(0,s.jsx)(n.h3,{id:"casts",children:"Casts"}),"\n",(0,s.jsxs)(n.p,{children:["The casts attribute can be used to parse any of the model's attributes to a specific type. In the code sample below we can cast ",(0,s.jsx)(n.code,{children:"total_credits"})," to ",(0,s.jsx)(n.code,{children:"float"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["More information about the applicable cast-types can be found in the laravel ",(0,s.jsx)(n.a,{href:"https://laravel.com/docs/eloquent-mutators",children:"eloquent-mutators"})," documentation."]}),"\n",(0,s.jsxs)(n.p,{children:["You can place any dates inside the ",(0,s.jsx)(n.code,{children:"$dates"})," to parse those automatically."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(96540);const o={},i=s.createContext(o);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);