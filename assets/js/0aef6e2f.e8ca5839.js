"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9480],{95788:(e,n,a)=>{a.d(n,{Iu:()=>u,yg:()=>c});var t=a(11504);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(a),g=r,c=d["".concat(s,".").concat(g)]||d[g]||y[g]||o;return a?t.createElement(c,l(l({ref:n},u),{},{components:a})):t.createElement(c,l({ref:n},u))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},57088:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=a(45072),r=(a(11504),a(95788));const o={title:"Responses"},l=void 0,i={unversionedId:"getting-started/responses",id:"version-11.x/getting-started/responses",title:"Responses",description:"* Apiato Response",source:"@site/versioned_docs/version-11.x/getting-started/responses.md",sourceDirName:"getting-started",slug:"/getting-started/responses",permalink:"/docs/11.x/getting-started/responses",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-11.x/getting-started/responses.md",tags:[],version:"11.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1659346629,formattedLastUpdatedAt:"Aug 1, 2022",frontMatter:{title:"Responses"},sidebar:"version-11.x/docs",previous:{title:"Requests",permalink:"/docs/11.x/getting-started/requests"},next:{title:"Conventions",permalink:"/docs/11.x/getting-started/conventions-and-principles"}},s={},p=[{value:"Apiato Response",id:"response",level:3},{value:"Default Apiato Responses Payload:",id:"default-response-payload",level:3},{value:"Change the default Response payload:",id:"change-default-response-payload",level:3},{value:"Resource Keys",id:"resource-keys",level:3},{value:"Error Responses formats",id:"error-response-formats",level:3},{value:"Building a Responses from the Controller:",id:"building-response-from-controller",level:2}],u={toc:p},d="wrapper";function y(e){let{components:n,...a}=e;return(0,r.yg)(d,(0,t.c)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#response"},"Apiato Response")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#default-response-payload"},"Default Apiato Responses Payload")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#change-default-response-payload"},"Change the default Response payload")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#resource-keys"},"Resource Keys")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#error-response-formats"},"Error Responses formats")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#building-response-from-controller"},"Building a Responses from the Controller"))),(0,r.yg)("h3",{id:"response"},"Apiato Response"),(0,r.yg)("p",null,"In Apiato you can define your own response payload or use one of the supported serializers."),(0,r.yg)("p",null,"Currently, the supported serializers are (",(0,r.yg)("inlineCode",{parentName:"p"},"ArraySerializer"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"DataArraySerializer")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"JsonApiSerializer"),"). As provided\nby ",(0,r.yg)("a",{parentName:"p",href:"http://fractal.thephpleague.com/transformers/"},"Fractal"),"."),(0,r.yg)("p",null,"By default, Apiato uses ",(0,r.yg)("inlineCode",{parentName:"p"},"DataArraySerializer"),". Below is an example of the response payload."),(0,r.yg)("h3",{id:"default-response-payload"},"Default Apiato Responses Payload:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"DataArraySerializer")," response payload looks like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 100,\n      ...\n      "relation 1": {\n        "data": [ // multiple data\n          {\n            "id": 11,\n              ...\n          }\n        ]\n      },\n      "relation 2": {\n        "data": { // single data\n          "id": 22,\n          ...\n          }\n        }\n      }\n    },\n    ...\n  ],\n  "meta": {\n    "include": [ // what can be included\n      "xxx",\n      "yyy"\n    ],\n    "custom": [],\n    "pagination": {\n      "total": 999,\n      "count": 999,\n      "per_page": 999,\n      "current_page": 999,\n      "total_pages": 999,\n      "links": {\n        "next": "http://api.apiato.test/v1/accounts?page=999"\n      }\n    }\n  }\n}\n')),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Paginated response:")),(0,r.yg)("p",null,"When data is paginated the response payload will contain a ",(0,r.yg)("inlineCode",{parentName:"p"},"meta")," description about the pagination."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "meta": {\n    "include": [\n      "xxx",\n      "yyy"\n    ],\n    "custom": [],\n    "pagination": { // pagination meta\n      "total": 999,\n      "count": 999,\n      "per_page": 999,\n      "current_page": 999,\n      "total_pages": 999,\n      "links": {\n        "next": "http://api.apiato.test/v1/accounts?page=999"\n      }\n    }\n  }\n}\n')),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Includes:")),(0,r.yg)("p",null,"Informs the User about what relationships can be included in the response. Example: ",(0,r.yg)("inlineCode",{parentName:"p"},"?include=tags,user")),(0,r.yg)("p",null,"For more details read the ",(0,r.yg)("inlineCode",{parentName:"p"},"Relationships")," section in the ",(0,r.yg)("a",{parentName:"p",href:"../core-features/query-parameters#relationships-include"},"Query Parameters")," page."),(0,r.yg)("h3",{id:"change-default-response-payload"},"Change the default Response payload:"),(0,r.yg)("p",null,"The default response format (specification) is the ",(0,r.yg)("inlineCode",{parentName:"p"},"DataArray")," Fractal Serializer (",(0,r.yg)("inlineCode",{parentName:"p"},"League\\Fractal\\Serializer\\DataArraySerializer"),")."),(0,r.yg)("p",null,"To change the default Fractal Serializer open the ",(0,r.yg)("inlineCode",{parentName:"p"},"app/Ship/Configs/fractal.php")," file and change the"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"'default_serializer' => League\\Fractal\\Serializer\\DataArraySerializer::class,\n")),(0,r.yg)("p",null,"The Supported Serializers are"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ArraySerializer")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"DataArraySerializer")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"JsonApiSerializer"))),(0,r.yg)("p",null,"More details can be found at ",(0,r.yg)("a",{parentName:"p",href:"http://fractal.thephpleague.com/transformers/"},"Fractal")," and\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/spatie/laravel-fractal"},"Laravel Fractal Wrapper"),"."),(0,r.yg)("p",null,"In case of returning JSON Data (",(0,r.yg)("inlineCode",{parentName:"p"},"JsonApiSerializer"),"), you may wish to check some JSON response standards:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://labs.omniti.com/labs/jsend"},"JSEND")," (very basic)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"http://jsonapi.org/format/"},"JSON API")," (very popular and well documented)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"http://stateless.co/hal_specification.html"},"HAL")," (useful in case of hypermedia)")),(0,r.yg)("h3",{id:"resource-keys"},"Resource Keys"),(0,r.yg)("p",null,"The transformer allows appending a ",(0,r.yg)("inlineCode",{parentName:"p"},"ResourceKey")," to the transformed resource. You can set the ",(0,r.yg)("inlineCode",{parentName:"p"},"ResourceKey")," in your\nresponse payload in 2 ways:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Manually set it via the respective parameter in the ",(0,r.yg)("inlineCode",{parentName:"li"},"$this->transform()")," call. Note that this will only set the\n",(0,r.yg)("inlineCode",{parentName:"li"},"top level")," resource key and does not affect the resource keys from ",(0,r.yg)("inlineCode",{parentName:"li"},"included")," resources!"),(0,r.yg)("li",{parentName:"ol"},"Specify it on the respective ",(0,r.yg)("inlineCode",{parentName:"li"},"Model"),". By overriding $resourceKey, (",(0,r.yg)("inlineCode",{parentName:"li"},"protected $resourceKey = 'FooBar';"),").\nIf no ",(0,r.yg)("inlineCode",{parentName:"li"},"$resourceKey")," is defined at the ",(0,r.yg)("inlineCode",{parentName:"li"},"Model"),", the ",(0,r.yg)("inlineCode",{parentName:"li"},"ShortClassName")," is used as key. For example, the ",(0,r.yg)("inlineCode",{parentName:"li"},"ShortClassName")," of\nthe ",(0,r.yg)("inlineCode",{parentName:"li"},"App\\Containers\\AppSection\\User\\Models\\User::class")," is ",(0,r.yg)("inlineCode",{parentName:"li"},"User"),".")),(0,r.yg)("h3",{id:"error-response-formats"},"Error Responses formats"),(0,r.yg)("p",null,"Visit each feature, e.g. the Authentication and there you will see how an unauthenticated response looks like, same\nfor Authorization, Validation and so on."),(0,r.yg)("h2",{id:"building-response-from-controller"},"Building a Responses from the Controller:"),(0,r.yg)("p",null,"Checkout the ",(0,r.yg)("a",{parentName:"p",href:"../main-components/controllers"},"Controller response builder helper functions"),"."))}y.isMDXComponent=!0}}]);