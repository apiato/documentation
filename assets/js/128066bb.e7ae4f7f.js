"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[9990],{98050:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=i(74848),t=i(28453);const s={sidebar_position:8,title:"Views",tags:["component","main-component","controller"]},c=void 0,a={id:"components/main-components/views",title:"Views",description:"Views offer a convenient mechanism for organizing HTML content in separate files.",source:"@site/versioned_docs/version-12.x/components/main-components/views.md",sourceDirName:"components/main-components",slug:"/components/main-components/views",permalink:"/docs/components/main-components/views",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-12.x/components/main-components/views.md",tags:[{inline:!0,label:"component",permalink:"/docs/tags/component"},{inline:!0,label:"main-component",permalink:"/docs/tags/main-component"},{inline:!0,label:"controller",permalink:"/docs/tags/controller"}],version:"12.x",lastUpdatedBy:"Mohammad Alavi",lastUpdatedAt:1697511591e3,sidebarPosition:8,frontMatter:{sidebar_position:8,title:"Views",tags:["component","main-component","controller"]},sidebar:"tutorialSidebar",previous:{title:"Transformers",permalink:"/docs/components/main-components/transformers"},next:{title:"Exceptions",permalink:"/docs/components/main-components/exceptions"}},r={},l=[{value:"Definition &amp; Principles",id:"definition--principles",level:2},{value:"Rules",id:"rules",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Namespaces",id:"namespaces",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://laravel.com/docs/views",children:"Views"})," offer a convenient mechanism for organizing HTML content in separate files.\nThey facilitate the separation of your controller or application logic from the presentation logic."]}),"\n",(0,o.jsx)(n.h2,{id:"definition--principles",children:"Definition & Principles"}),"\n",(0,o.jsxs)(n.p,{children:["Read ",(0,o.jsx)(n.a,{href:"https://github.com/Mahmoudz/Porto#definitions--principles",children:(0,o.jsx)(n.strong,{children:"Porto SAP Documentation (#Views)"})}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["All container-specific Views MUST be placed in the ",(0,o.jsx)(n.code,{children:"app/Containers/{Section}/{Container}/UI/WEB/Views"})," directory."]}),"\n",(0,o.jsxs)(n.li,{children:["All general Views MUST be placed in the ",(0,o.jsx)(n.code,{children:"app/Ship/Views"})," directory."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:"app\n\u2514\u2500\u2500 Containers\n    \u2514\u2500\u2500 Section\n        \u2514\u2500\u2500 Container\n            \u2514\u2500\u2500 UI\n                \u2514\u2500\u2500 WEB\n                    \u2514\u2500\u2500 Views\n                        \u251c\u2500\u2500 view-a.php\n                        \u251c\u2500\u2500 view-b.php\n                        \u2514\u2500\u2500 ...\n"})}),"\n",(0,o.jsx)(n.h2,{id:"code-example",children:"Code Example"}),"\n",(0,o.jsx)(n.p,{children:"Views are defined exactly as you would define them in Laravel."}),"\n",(0,o.jsx)(n.h2,{id:"namespaces",children:"Namespaces"}),"\n",(0,o.jsxs)(n.p,{children:["All views are namespaced\nusing the camelCase of their Section name followed by ",(0,o.jsx)(n.code,{children:"@"})," and then the camelCase of their Container name."]}),"\n",(0,o.jsxs)(n.p,{children:["For example,\nif you have a view named ",(0,o.jsx)(n.code,{children:"welcome-page"})," in the ",(0,o.jsx)(n.code,{children:"app/Containers/MySection/MyContainer/UI/WEB/Views"})," directory,\nyou can access it like this: ",(0,o.jsx)(n.code,{children:"view(mySection@myContainer::welcome-page)"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Attempting to access the view without the namespace,\nsuch as ",(0,o.jsx)(n.code,{children:"view('welcome-page')"}),", will result in the view not being found."]}),"\n",(0,o.jsxs)(n.p,{children:["An exception to this namespace convention is for view files\nlocated in the ",(0,o.jsx)(n.code,{children:"app/Ship/Views"})," and ",(0,o.jsx)(n.code,{children:"app/Ship/Mails/Templates"})," directories.\nThese views will be namespaced using the word ",(0,o.jsx)(n.code,{children:"ship"})," instead of the Section and Container names."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, you would access such a view like this: ",(0,o.jsx)(n.code,{children:"view(ship::welcome-page)"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var o=i(96540);const t={},s=o.createContext(t);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);