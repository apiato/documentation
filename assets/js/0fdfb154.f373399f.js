"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[4747],{75141:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var o=n(74848),r=n(28453);const s={title:"Policies",tags:["component","optional-component","policy","authorization","request"]},t=void 0,c={id:"components/optional-components/policies",title:"Policies",description:"Apiato policies are just Laravel Policies,",source:"@site/versioned_docs/version-12.x/components/optional-components/policies.md",sourceDirName:"components/optional-components",slug:"/components/optional-components/policies",permalink:"/docs/components/optional-components/policies",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-12.x/components/optional-components/policies.md",tags:[{inline:!0,label:"component",permalink:"/docs/tags/component"},{inline:!0,label:"optional-component",permalink:"/docs/tags/optional-component"},{inline:!0,label:"policy",permalink:"/docs/tags/policy"},{inline:!0,label:"authorization",permalink:"/docs/tags/authorization"},{inline:!0,label:"request",permalink:"/docs/tags/request"}],version:"12.x",lastUpdatedBy:"Mohammad Alavi",lastUpdatedAt:1707229167e3,frontMatter:{title:"Policies",tags:["component","optional-component","policy","authorization","request"]},sidebar:"tutorialSidebar",previous:{title:"Notifications",permalink:"/docs/components/optional-components/notifications"},next:{title:"Repositories",permalink:"/docs/components/optional-components/repository/repositories"}},l={},a=[{value:"Rules",id:"rules",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Registering Policies",id:"registering-policies",level:2},{value:"Policy Auto-Discovery",id:"policy-auto-discovery",level:3},{value:"Policy Registration Flow",id:"policy-registration-flow",level:2},{value:"Helper Methods",id:"helper-methods",level:2}];function d(e){const i={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.p,{children:["Apiato policies are just ",(0,o.jsx)(i.a,{href:"https://laravel.com/docs/authorization",children:"Laravel Policies"}),",\nand they function in the exact same way as Laravel policies.\nHowever, they come with additional rules and conventions specific to Apiato."]}),"\n",(0,o.jsxs)(i.p,{children:["To generate new policies you may use the ",(0,o.jsx)(i.code,{children:"apiato:generate:policy"})," interactive command:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"php artisan apiato:generate:policy\n"})}),"\n",(0,o.jsx)(i.h2,{id:"rules",children:"Rules"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["All Policies:","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["MUST be placed in the ",(0,o.jsx)(i.code,{children:"app/Containers/{section}/{container}/Policies"})," directory."]}),"\n",(0,o.jsxs)(i.li,{children:["MUST extend the ",(0,o.jsx)(i.code,{children:"App\\Ship\\Parents\\Policies\\Policy"})," class.","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["The parent extension SHOULD be aliased as ",(0,o.jsx)(i.code,{children:"ParentPolicy"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["SHOULD be named after the model they are associated with, followed by the ",(0,o.jsx)(i.code,{children:"Policy"})," suffix. For instance, ",(0,o.jsx)(i.code,{children:"UserPolicy.php"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,o.jsx)(i.p,{children:"The highlighted section showcases the policy registration point:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:"app\n\u2514\u2500\u2500 Containers\n    \u2514\u2500\u2500 Section\n        \u2514\u2500\u2500 Container\n            \u251c\u2500\u2500 Policies\n            \u2502   \u251c\u2500\u2500 UserPolicy.php\n            \u2502   \u2514\u2500\u2500 ...\n            \u2514\u2500\u2500 Providers\n                // highlight-start\n                \u251c\u2500\u2500 AuthServiceProvider.php\n                // highlight-end\n                \u2514\u2500\u2500 ...\n"})}),"\n",(0,o.jsx)(i.h2,{id:"code-example",children:"Code Example"}),"\n",(0,o.jsx)(i.p,{children:"Policies are defined exactly as you would define them in Laravel."}),"\n",(0,o.jsx)(i.h2,{id:"registering-policies",children:"Registering Policies"}),"\n",(0,o.jsx)(i.p,{children:"Once the policy class has been created, it needs to be registered.\nRegistering policies is\nhow we can inform Apiato which policy to use when authorizing actions against a given model type."}),"\n",(0,o.jsxs)(i.p,{children:["Registering policies can be done\nby adding them to the ",(0,o.jsx)(i.code,{children:"policies"})," array in the ",(0,o.jsx)(i.code,{children:"App\\Containers\\{Section}\\{Container}\\Providers\\AuthServiceProvider"})," class."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:"use ...\nuse App\\Ship\\Parents\\Providers\\AuthServiceProvider as ParentAuthProvider;\n\nclass AuthServiceProvider extends ParentAuthProvider\n{\n    protected $policies = [\n        Post::class => PostPolicy::class,\n    ];\n}\n"})}),"\n",(0,o.jsxs)(i.p,{children:["To generate an event service provider\nyou may use the ",(0,o.jsx)(i.code,{children:"apiato:generate:provider"})," interactive command:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"php artisan apiato:generate:provider\n"})}),"\n",(0,o.jsxs)(i.p,{children:["Remember to also register the ",(0,o.jsx)(i.code,{children:"AuthServiceProvider"})," in the container's ",(0,o.jsx)(i.code,{children:"MainServiceProvider"}),":"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:"use ...\nuse App\\Ship\\Parents\\Providers\\MainServiceProvider as ParentMainServiceProvider;\n\nclass MainServiceProvider extends ParentMainServiceProvider\n{\n    protected array $serviceProviders = [\n        // ... Other service providers\n        AuthServiceProvider::class,\n    ];\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"policy-auto-discovery",children:"Policy Auto-Discovery"}),"\n",(0,o.jsx)(i.p,{children:"Apiato offers a policy auto-discovery feature that eliminates the need for manual registration of model policies.\nThis automatic discovery process relies on adhering to standard Apiato naming conventions for policies."}),"\n",(0,o.jsxs)(i.p,{children:["By following the ",(0,o.jsx)(i.a,{href:"#rules",children:"rules"})," outlined above, you allow Apiato to automatically discover your policies."]}),"\n",(0,o.jsx)(i.p,{children:"To summarize:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["Policies must be stored within the ",(0,o.jsx)(i.code,{children:"app/Containers/{section}/{container}/Policies"})," directory."]}),"\n",(0,o.jsxs)(i.li,{children:["The policy name should mirror the corresponding model's name while appending a ",(0,o.jsx)(i.code,{children:"Policy"})," suffix. For instance, a ",(0,o.jsx)(i.code,{children:"User"})," model corresponds to a ",(0,o.jsx)(i.code,{children:"UserPolicy"})," policy class."]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"policy-registration-flow",children:"Policy Registration Flow"}),"\n",(0,o.jsx)(i.p,{children:"In case you are going to register your policies manually, and don't want to use the auto-discovery feature,\nyou may want to understand the policy registration process.\nHere is a breakdown of the registration flow."}),"\n",(0,o.jsx)(i.p,{children:"Consider the following folder structure:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:"app\n\u2514\u2500\u2500 Containers\n    \u2514\u2500\u2500 Section\n        \u2514\u2500\u2500 Container\n            \u251c\u2500\u2500 Policies\n            \u2502   \u251c\u2500\u2500 DemoPolicy.php \u2500\u25ba\u2500\u2510\n            \u2502   \u2514\u2500\u2500 ...               \u2502                                                                                         \n            \u2514\u2500\u2500 Providers             \u25bc\n                \u251c\u2500\u2500 AuthServiceProvider.php \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u251c\u2500\u2500 MainServiceProvider.php \u25c4\u2500registered\u2500in\u2500\u25c4\u2518\n                \u2514\u2500\u2500 ...\n\n"})}),"\n",(0,o.jsx)(i.p,{children:"The following diagram illustrates the registration flow of policies in the above folder structure:"}),"\n",(0,o.jsx)(i.mermaid,{value:"graph LR\n  subgraph Container\n    MainServiceProvider\n    AuthServiceProvider\n    DemoPolicy\n  end\n  \n  MainServiceProvider --\x3e|loads| AuthServiceProvider\n  AuthServiceProvider --\x3e|registered in| MainServiceProvider\n  DemoPolicy --\x3e|registered in| AuthServiceProvider\n\n  subgraph Application\n    SPLoader[[Service Provider Loader]]-- loads--\x3eMainServiceProvider\n  end"}),"\n",(0,o.jsx)(i.h2,{id:"helper-methods",children:"Helper Methods"}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsx)(i.p,{children:"Available since Core v8.7.0"}),"\n"]}),"\n",(0,o.jsxs)(i.p,{children:["All models are equipped with the ",(0,o.jsx)(i.code,{children:"owns"})," and ",(0,o.jsx)(i.code,{children:"isOwnedBy"})," methods,\nmade available through the ",(0,o.jsx)(i.code,{children:"Apiato\\Core\\Traits\\CanOwnTrait"})," trait.\nThese methods offer a convenient way to determine if a model is owned by another model or if a model owns another model."]}),"\n",(0,o.jsx)(i.p,{children:"These methods support all types of relationships, as demonstrated below:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-php",children:"// Check if a user owns a post\n$user->owns($post);\n\n// Check if a post is owned by a user\n$post->isOwnedBy($user);\n"})})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>c});var o=n(96540);const r={},s=o.createContext(r);function t(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);