"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[52643],{54983:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=s(74848),t=s(28453);const r={title:"Events"},l=void 0,a={id:"optional-components/events",title:"Events",description:"- Definition",source:"@site/versioned_docs/version-9.x/optional-components/events.md",sourceDirName:"optional-components",slug:"/optional-components/events",permalink:"/docs/9.x/optional-components/events",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/events.md",tags:[],version:"9.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1618096631e3,frontMatter:{title:"Events"},sidebar:"docs",previous:{title:"Languages",permalink:"/docs/9.x/optional-components/languages"},next:{title:"Mails",permalink:"/docs/9.x/optional-components/mails"}},o={},c=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Enabling Events",id:"enabling-events",level:3},{value:"Usage",id:"usage",level:3},{value:"Dispatch Events",id:"dispatch-events",level:3},{value:"Queueing an Event",id:"queueing",level:2},{value:"Handling an Event",id:"handling-an-event",level:2},{value:"Broadcasting",id:"broadcasting",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#definition",children:"Definition"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#enabling-events",children:"Enabling Events"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#usage",children:"Usage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dispatch-events",children:"Dispatch Events"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#queueing",children:"Queueing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#broadcasting",children:"Broadcasting"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.p,{children:"Events:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Events provide a simple observer implementation, allowing you to subscribe and listen for various events that occur in your application."}),"\n",(0,i.jsx)(n.li,{children:"Events are classes that can be fired from anywhere in your application."}),"\n",(0,i.jsx)(n.li,{children:"An event class will usually be bound to one or many Events Listeners Classes or has those Listeners registered to listen to it."}),"\n",(0,i.jsx)(n.li,{children:'"fire" is the term that is usually used to call an Event.'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["More details ",(0,i.jsx)(n.a,{href:"https://laravel.com/docs/events",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Events can be fired from Actions and or Tasks. It's preferable to choose one place only. (Tasks are recommended)."}),"\n",(0,i.jsx)(n.li,{children:"Events SHOULD be created inside the Containers. However, general Events CAN be created in the Port layer."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Event classes CAN be placed inside the Containers in Events folders or on the Ship for the general Events."}),"\n",(0,i.jsxs)(n.li,{children:["All Events MUST extend from ",(0,i.jsx)(n.code,{children:"App\\Ship\\Parents\\Events\\Event"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" - App\n    - Containers\n        - {container-name}\n            - Events\n                - SomethingHappenedEvent.php\n                - ...\n            - Listeners\n                - ListenToMusicListener.php\n                - ...\n\n    - Ship\n        - Events\n            - GlobalStateChanged.php\n            - SomethingBiiigHappenedEvent.php\n            - ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"enabling-events",children:"Enabling Events"}),"\n",(0,i.jsxs)(n.p,{children:["Before you can use events you need to add the ",(0,i.jsx)(n.code,{children:"EventServiceProvider"})," to the ",(0,i.jsx)(n.code,{children:"MainServiceProvider"})," of the Ship (if this has not been registered so far). See example below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<?php\n\nnamespace App\\Containers\\Car\\Providers;\n\nclass MainServiceProvider extends MainProvider\n{\n\n    /**\n     * Container Service Providers.\n     *\n     * @var array\n     */\n    public $serviceProviders = [\n        EventServiceProvider::class,\n    ];\n\n    // ...\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"In Laravel, you can create and register events in multiple way. Below is an example of an Event that handles itself."}),"\n",(0,i.jsx)(n.p,{children:"Event Class Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Containers\\User\\Events;\n\nuse App\\Containers\\User\\Models\\User;\nuse App\\Ship\\Parents\\Events\\Event;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass UserRegisteredEvent extends Event implements ShouldQueue\n{\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function handle()\n    {\n        Log::info('New User registration. ID = ' . $this->user->getHashedKey() . ' | Email = ' . $this->user->email . '.');\n\n        // ...\n    }\n\n    public function broadcastOn()\n    {\n        return new PrivateChannel('channel-name');\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Note: You will get more benefits creating Events Listeners for each Event."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To do this you will need to create a custom ",(0,i.jsx)(n.code,{children:"EventServiceProvider"})," in your container extending ",(0,i.jsx)(n.code,{children:"App\\Ship\\Parents\\Providers\\EventsProvider"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Your custom ",(0,i.jsx)(n.code,{children:"EventServiceProvider"})," needs to be registered in the containers ",(0,i.jsx)(n.code,{children:"MainServiceProvider"})," as well."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<?php\n\nnamespace App\\Containers\\Car\\Providers;\n\nuse App\\Ship\\Parents\\Providers\\MainProvider;\n\n/**\n * Class MainServiceProvider.\n *\n * The Main Service Provider of this container, it will be automatically registered in the framework.\n */\nclass MainServiceProvider extends MainProvider\n{\n\n    /**\n     * Container Service Providers.\n     *\n     * @var array\n     */\n    public $serviceProviders = [\n        EventServiceProvider::class,\n    ];\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dispatch-events",children:"Dispatch Events"}),"\n",(0,i.jsx)(n.p,{children:"You can dispatch an Event from anywhere you want (ideally from Actions and Tasks)."}),"\n",(0,i.jsx)(n.p,{children:"Example: Dispatching the Event class from the example above"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\n// using helper function\nevent(New UserEmailChangedEvent($user));\n\n// manually\n\\App::make(\\Illuminate\\Contracts\\Bus\\Dispatcher\\Dispatcher::class)->dispatch(New UserEmailChangedEvent($user));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"queueing",children:"Queueing an Event"}),"\n",(0,i.jsxs)(n.p,{children:["Events can implement ",(0,i.jsx)(n.code,{children:"Illuminate\\Contracts\\Queue\\ShouldQueue"})," to be queued."]}),"\n",(0,i.jsx)(n.h2,{id:"handling-an-event",children:"Handling an Event"}),"\n",(0,i.jsx)(n.p,{children:"You can handle jobs on dispatching an event."}),"\n",(0,i.jsx)(n.p,{children:"To do so, you need to implement one of the following interfaces:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Apiato\\Core\\Abstracts\\Events\\Interfaces\\ShouldHandleNow"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Apiato\\Core\\Abstracts\\Events\\Interfaces\\ShouldHandle"})}),"\n",(0,i.jsxs)(n.p,{children:["This will force you to implement the ",(0,i.jsx)(n.code,{children:"handle"})," method and will make apiato execute the method upon dispatching the event."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ShouldHandleNow"})," Interface will make the event execute the handle method as soon as the event gets dispatched."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ShouldHandle"})," Interface will create an eventjob and execute the handle method async (through laravel jobs)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'namespace App\\Containers\\Example\\Events;\n\n\nuse Apiato\\Core\\Abstracts\\Events\\Interfaces\\ShouldHandle;\nuse App\\Ship\\Parents\\Events\\Event;\n\nclass ExampleEvent extends Event implements ShouldHandle\n{\n    /**\n     * If ShouldHandle interface is implemented this variable\n     * sets the time (in seconds or timestamp) to wait before a job is executed\n     *\n     * @var \\DateTimeInterface|\\DateInterval|int|null $jobDelay\n     */\n    public $jobDelay = 60;\n\n    /**\n     * If ShouldHandle interface is implemented this variable\n     * sets the name of the queue to push the job on\n     *\n     * @var string $jobQueue\n     */\n    public $jobQueue = "example_queue";\n\n    public function handle()\n    {\n        // Do some handling here\n    }\n    \n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"broadcasting",children:"Broadcasting"}),"\n",(0,i.jsxs)(n.p,{children:["Note: to define Broadcasting route go to ",(0,i.jsx)(n.code,{children:"app/Ship/Boardcasts/Routes.php"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(96540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);