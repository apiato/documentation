"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[16525],{44022:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=s(74848),t=s(28453);const o={sidebar_position:7,title:"Hash ID"},r=void 0,a={id:"security/hash-id",title:"Hash ID",description:"Hashing your internal ID's is a very helpful feature for many security reasons,",source:"@site/versioned_docs/version-13.x/security/hash-id.mdx",sourceDirName:"security",slug:"/security/hash-id",permalink:"/docs/security/hash-id",draft:!1,unlisted:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-13.x/security/hash-id.mdx",tags:[],version:"13.x",lastUpdatedBy:"Mohammad Alavi",lastUpdatedAt:1746631e6,sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Hash ID"},sidebar:"tutorialSidebar",previous:{title:"Password Reset",permalink:"/docs/security/password-reset"},next:{title:"Overview",permalink:"/docs/pacakges/"}},d={},l=[{value:"Enabling Hash ID",id:"enabling-hash-id",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Route Model Binding",id:"route-model-binding",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Hashing your internal ID's is a very helpful feature for many security reasons,\nsuch as preventing your internal ID's from being exposed to the public, your competitors, and hackers."}),"\n",(0,i.jsx)(n.h2,{id:"enabling-hash-id",children:"Enabling Hash ID"}),"\n",(0,i.jsxs)(n.p,{children:["Set the ",(0,i.jsx)(n.code,{children:"HASH_ID=true"})," in the ",(0,i.jsx)(n.code,{children:".env"})," file."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"BCMath PHP Extension is required to use this feature."})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure to always use the ",(0,i.jsx)(n.code,{children:"getHashedKey"})," method on any model,\nwhenever you need to return an ID (mainly from ",(0,i.jsx)(n.a,{href:"/docs/components/main-components/transformers",children:"transformers"}),")\nweather you are using Hash ID or not.\nIf Hash ID feature is disabled, the ",(0,i.jsx)(n.code,{children:"getHashedKey"})," method will return the normal ID."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"'id' => $user->getHashedKey(),\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You may use the ",(0,i.jsx)(n.a,{href:"/docs/digging-deeper/helpers#hashids",children:"hashids"})," helper function to access the Hash ID instance."]})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"There are three ways to pass an ID to your system via the API:"}),"\n",(0,i.jsx)(n.p,{children:"In URL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"/items/XbPW7awNkzl83LD6\n"})}),"\n",(0,i.jsx)(n.p,{children:"As query string:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"/items?id=XbPW7awNkzl83LD6\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or as HTTP request body:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "id": "XbPW7awNkzl83LD6"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now you need to tell your API to ",(0,i.jsx)(n.a,{href:"/docs/components/main-components/requests#hash-id-decoding",children:"decode the ID"})," for you.\nThis is done by setting the ",(0,i.jsx)(n.code,{children:"$decode"})," and ",(0,i.jsx)(n.code,{children:"$urlParameters"})," properties on your Request class.\nAfter setting those properties,\nthe ID will be automatically decoded for you to apply validation rules on it or/and use it from your controller."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"$request->id"})," will return the decoded ID."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Hash ID configuration is done in the ",(0,i.jsx)(n.code,{children:"app/Ship/Configs/hashids.php"})," config file.\nYou can set the ",(0,i.jsx)(n.code,{children:"HASH_ID_KEY"})," in the ",(0,i.jsx)(n.code,{children:".env"})," file to any random string.\nApiato defaults to the ",(0,i.jsx)(n.code,{children:"APP_KEY"})," should this not be set."]}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"HASH_ID_KEY"})," acts as the salt during hashing of the ID. This should never be changed in production\nas it renders all previously generated IDs impossible to decode."]})}),"\n",(0,i.jsx)(n.h2,{id:"route-model-binding",children:"Route Model Binding"}),"\n",(0,i.jsxs)(n.p,{children:["Laravel ",(0,i.jsx)(n.a,{href:"https://laravel.com/docs/routing#route-model-binding",children:"Route Model Binding"})," feature is supported out of the box,\nand Apiato will automatically decode the ID for you."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(96540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);