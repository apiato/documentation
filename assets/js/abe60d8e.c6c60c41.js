"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[3170],{45779:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/main-components/transformers","title":"Transformers","description":"Transformers,","source":"@site/versioned_docs/version-12.x/components/main-components/transformers.md","sourceDirName":"components/main-components","slug":"/components/main-components/transformers","permalink":"/docs/components/main-components/transformers","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-12.x/components/main-components/transformers.md","tags":[{"inline":true,"label":"component","permalink":"/docs/tags/component"},{"inline":true,"label":"main-component","permalink":"/docs/tags/main-component"},{"inline":true,"label":"transformer","permalink":"/docs/tags/transformer"},{"inline":true,"label":"controller","permalink":"/docs/tags/controller"},{"inline":true,"label":"response","permalink":"/docs/tags/response"},{"inline":true,"label":"model","permalink":"/docs/tags/model"}],"version":"12.x","lastUpdatedBy":"Mohammad Alavi","lastUpdatedAt":1707153375000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Transformers","tags":["component","main-component","transformer","controller","response","model"]},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/docs/components/main-components/models"},"next":{"title":"Views","permalink":"/docs/components/main-components/views"}}');var i=r(74848),l=r(28453);const t={sidebar_position:7,title:"Transformers",tags:["component","main-component","transformer","controller","response","model"]},a=void 0,o={},d=[{value:"Definition &amp; Principles",id:"definition--principles",level:2},{value:"Rules",id:"rules",level:2},{value:"Folder Structure",id:"folder-structure",level:2},{value:"Code Example",id:"code-example",level:2},{value:"Including Relationships",id:"including-relationships",level:2},{value:"Defining Relationships",id:"defining-relationships",level:3},{value:"Include Per API Consumer Request",id:"include-per-api-consumer-request",level:3},{value:"Include By Default",id:"include-by-default",level:3},{value:"Resource Key",id:"resource-key",level:2},{value:"Setting the Resource Key",id:"setting-the-resource-key",level:3},{value:"Via Model",id:"via-model",level:4},{value:"Via Controller",id:"via-controller",level:4},{value:"Getting the Resource Key",id:"getting-the-resource-key",level:3},{value:"Transformer Example",id:"transformer-example",level:4},{value:"Response Example",id:"response-example",level:4},{value:"Helper Methods",id:"helper-methods",level:2},{value:"nullableItem",id:"nullableitem",level:3},{value:"Response Payload",id:"response-payload",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Transformers,\noften referred to as Response Transformers, serve a similar purpose to Views, but specifically for JSON responses.\nWhile Views are responsible for presenting data in HTML format,\nTransformers take data and format it into JSON representation."}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed information about transformers and their usage,\nyou can refer to the ",(0,i.jsx)(n.a,{href:"https://fractal.thephpleague.com/transformers/",children:"official documentation of Fractal"}),",\nwhich is the underlying library used for handling transformations in Apiato."]}),"\n",(0,i.jsxs)(n.p,{children:["To generate new transformers\nyou may use the ",(0,i.jsx)(n.code,{children:"apiato:generate:transformer"})," interactive command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"php artisan apiato:generate:transformer\n"})}),"\n",(0,i.jsx)(n.h2,{id:"definition--principles",children:"Definition & Principles"}),"\n",(0,i.jsxs)(n.p,{children:["Read ",(0,i.jsx)(n.a,{href:"https://github.com/Mahmoudz/Porto#definitions--principles",children:(0,i.jsx)(n.strong,{children:"Porto SAP Documentation (#Transformers)"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["All Transformers:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["MUST be placed in the ",(0,i.jsx)(n.code,{children:"app/Containers/{Section}/{Container}/UI/API/Transformers"})," directory."]}),"\n",(0,i.jsxs)(n.li,{children:["MUST extend the ",(0,i.jsx)(n.code,{children:"App\\Ship\\Parents\\Transformers\\Transformer"})," class.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The parent extension SHOULD be aliased as ",(0,i.jsx)(n.code,{children:"ParentTransformer"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["MUST have a public ",(0,i.jsx)(n.code,{children:"transform"})," method returning an array."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"app\n\u2514\u2500\u2500 Containers\n    \u2514\u2500\u2500 Section\n        \u2514\u2500\u2500 Container\n            \u2514\u2500\u2500 UI\n                \u2514\u2500\u2500 API\n                    \u2514\u2500\u2500 Transformers\n                        \u251c\u2500\u2500 TransformerA.php\n                        \u251c\u2500\u2500 TransformerB.php\n                        \u2514\u2500\u2500 ...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"code-example",children:"Code Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use ...\nuse App\\Ship\\Parents\\Transformers\\Transformer as ParentTransformer;\n\nclass UserTransformer extends ParentTransformer\n{\n    protected $availableIncludes = [];\n\n    protected $defaultIncludes = [];\n\n    public function transform(User $user)\n    {\n        return [\n            'object' => $user->getResourceKey(),\n            'id' => $user->getHashedKey(),\n            'name' => $user->name,\n            // ...\n        ];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"including-relationships",children:"Including Relationships"}),"\n",(0,i.jsxs)(n.p,{children:["You can include model relationships for complex data structures using the ",(0,i.jsx)(n.code,{children:"include"})," query parameter.\nThese relationships can be included in the response either ",(0,i.jsx)(n.a,{href:"#include-per-api-consumer-request",children:"per API consumer request"})," or\n",(0,i.jsx)(n.a,{href:"#include-by-default",children:"by default"}),".\nThe ",(0,i.jsx)(n.code,{children:"include"})," parameter can be used on any endpoint\nthat has ",(0,i.jsx)(n.a,{href:"#defining-relationships",children:"relationships defined"})," in its transformer."]}),"\n",(0,i.jsx)(n.h3,{id:"defining-relationships",children:"Defining Relationships"}),"\n",(0,i.jsx)(n.p,{children:"To define relationships in the transformer, follow these two steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Define the relationship method in the transformer."}),"\n",(0,i.jsxs)(n.li,{children:["Add the relationship to the ",(0,i.jsx)(n.code,{children:"$availableIncludes"})," or ",(0,i.jsx)(n.code,{children:"$defaultIncludes"})," property."]}),"\n"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"availableIncludes"})," can be included in the response per API consumer request."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"defaultIncludes"})," are included in the response by default."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Any relationships not defined in the ",(0,i.jsx)(n.code,{children:"$availableIncludes"})," or ",(0,i.jsx)(n.code,{children:"$defaultIncludes"})," properties will be ignored."]})}),"\n",(0,i.jsxs)(n.p,{children:["The relationship method should be named ",(0,i.jsx)(n.code,{children:"include{RelationshipName}"})," and return a Fractal ",(0,i.jsx)(n.code,{children:"Item"})," or ",(0,i.jsx)(n.code,{children:"Collection"})," object.\nThe ",(0,i.jsx)(n.code,{children:"include{RelationshipName}"})," method will be called automatically by the Transformer\nwhen the relationship is requested."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, let's assume we have a ",(0,i.jsx)(n.code,{children:"User"})," model with a ",(0,i.jsx)(n.code,{children:"roles"})," relationship.\nThe ",(0,i.jsx)(n.code,{children:"UserTransformer"})," would have an ",(0,i.jsx)(n.code,{children:"includeRoles"})," method that returns a ",(0,i.jsx)(n.code,{children:"Collection"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function includeRoles(User $user): Collection\n{\n    return $this->collection($user->roles, new RoleTransformer());\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now,\nthe ",(0,i.jsx)(n.code,{children:"roles"})," relationship can be included in the response\nby adding it to the ",(0,i.jsx)(n.code,{children:"$availableIncludes"})," or ",(0,i.jsx)(n.code,{children:"$defaultIncludes"})," property."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"protected array $availableIncludes = [\n    'roles',\n];\n\n// or\n\nprotected array $defaultIncludes = [\n    'roles',\n];\n"})}),"\n",(0,i.jsx)(n.h3,{id:"include-per-api-consumer-request",children:"Include Per API Consumer Request"}),"\n",(0,i.jsxs)(n.p,{children:["In cases where you have multiple relationships for a model, such as ",(0,i.jsx)(n.code,{children:"User"})," with ",(0,i.jsx)(n.code,{children:"Roles"})," and ",(0,i.jsx)(n.code,{children:"Avatar"})," relationships,\nyou can include specific relationships in the response based on the API consumer's request.\nTo enable this,\nyou add the desired relationships to the ",(0,i.jsx)(n.code,{children:"$availableIncludes"})," property in the transformer\nand create corresponding methods for each relationship in the transformer to specify how to include that data."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's an example using a ",(0,i.jsx)(n.code,{children:"UserTransformer"})," with ",(0,i.jsx)(n.code,{children:"roles"})," and ",(0,i.jsx)(n.code,{children:"avatar"})," relationships added to the ",(0,i.jsx)(n.code,{children:"$availableIncludes"})," property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"protected array $availableIncludes = [\n    'roles',\n    'avatar',\n];\n\npublic function includeRoles(User $user): Collection\n{\n    return $this->collection($user->roles, new RoleTransformer());\n}\n\npublic function includeAvatar(User $user): Item\n{\n    return $this->item($user->avatar, new AvatarTransformer());\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To request the ",(0,i.jsx)(n.code,{children:"roles"})," data along with the ",(0,i.jsx)(n.code,{children:"User"})," resource, you can pass the ",(0,i.jsx)(n.code,{children:"include=roles"})," query parameter with the request:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"api.apiato.test/v1/users?include=roles\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will include the ",(0,i.jsx)(n.code,{children:"roles"})," data in the response:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": [\n    {\n      "object": "User",\n      "id": "0one37vjk49rp5ym",\n      "roles": [\n        {\n          "object": "Role",\n          "id": "bmo7y84xpgeza06k"\n        },\n        // ...\n      ]\n    },\n    // ...\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also include multiple relationships by separating them with a comma:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"api.apiato.test/v1/users?include=roles,avatar\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This includes both the ",(0,i.jsx)(n.code,{children:"roles"})," and ",(0,i.jsx)(n.code,{children:"avatar"})," relationships in the response."]}),"\n",(0,i.jsxs)(n.p,{children:["Nested includes are also possible.\nIf, for instance, the ",(0,i.jsx)(n.code,{children:"Avatar"})," model has a relationship with an ",(0,i.jsx)(n.code,{children:"Image"})," object,\nyou can request nested includes using dot notation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"api.apiato.test/v1/users?include=avatar,avatar.image\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This includes the ",(0,i.jsx)(n.code,{children:"Avatar"})," relationship with the ",(0,i.jsx)(n.code,{children:"Image"})," nested under it in the response."]}),"\n",(0,i.jsxs)(n.p,{children:["It's important to note that for nested includes, the nested relationship must also be defined.\nIn this example,\nthe ",(0,i.jsx)(n.code,{children:"AvatarTransformer"})," would need\nto have an ",(0,i.jsx)(n.code,{children:"includeImage"})," method defined and the ",(0,i.jsx)(n.code,{children:"image"})," relationship added to it's ",(0,i.jsx)(n.code,{children:"$availableIncludes"})," property."]}),"\n",(0,i.jsxs)(n.p,{children:["By defining the ",(0,i.jsx)(n.code,{children:"availableIncludes"})," and implementing the corresponding ",(0,i.jsx)(n.code,{children:"include{RelationshipName}"})," methods,\nyou allow API consumers to specify which related data they want in the response,\nenhancing the flexibility and efficiency of your API."]}),"\n",(0,i.jsx)(n.h3,{id:"include-by-default",children:"Include By Default"}),"\n",(0,i.jsxs)(n.p,{children:["To automatically include a relationship in every response generated by the transformer,\nyou can define the relationship in the transformer's ",(0,i.jsx)(n.code,{children:"$defaultIncludes"})," property.\nThis means\nthat the specified relationship will be included by default without the need for API consumers to request it explicitly."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's an example using a ",(0,i.jsx)(n.code,{children:"UserTransformer"})," where the ",(0,i.jsx)(n.code,{children:"avatar"})," relationship is defined as a default include:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"protected array $defaultIncludes = [\n    'avatar',\n];\n\npublic function includeAvatar(User $user): Item\n{\n    return $this->item($user->avatar, new AvatarTransformer());\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By setting the default includes in this manner,\nthe ",(0,i.jsx)(n.code,{children:"avatar"})," relationship will automatically be included in every response created by this transformer.\nThis can simplify responses and reduce the need for additional API requests for related data,\nultimately enhancing the efficiency and usability of your API."]}),"\n",(0,i.jsx)(n.h2,{id:"resource-key",children:"Resource Key"}),"\n",(0,i.jsx)(n.p,{children:"The transformer allows appending a resource key to the transformed resource.\nThis is useful when you want to have a consistent response payload format for all your resources."}),"\n",(0,i.jsx)(n.h3,{id:"setting-the-resource-key",children:"Setting the Resource Key"}),"\n",(0,i.jsx)(n.p,{children:"You can set the resource key in your response payload in two ways:"}),"\n",(0,i.jsx)(n.h4,{id:"via-model",children:"Via Model"}),"\n",(0,i.jsxs)(n.p,{children:["Specify the resource key on the respective model by setting the ",(0,i.jsx)(n.code,{children:"$resourceKey"})," property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class User extends ParentUserModel\n{\n    protected $resourceKey = 'User';\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"via-controller",children:"Via Controller"}),"\n",(0,i.jsxs)(n.p,{children:["Manually set the resource key using the ",(0,i.jsx)(n.code,{children:"resourceKey"})," parameter in the controller's ",(0,i.jsx)(n.code,{children:"transform"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$this->transform($model, ModelTransformer::class, resourceKey: 'User');\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["It's important to note that setting the ",(0,i.jsx)(n.code,{children:"resourceKey"})," using the ",(0,i.jsx)(n.code,{children:"transform"})," method will only impact the ",(0,i.jsx)(n.code,{children:"top level"})," resource key\nand will not affect the resource keys of ",(0,i.jsx)(n.code,{children:"included"})," resources."]})}),"\n",(0,i.jsx)(n.h3,{id:"getting-the-resource-key",children:"Getting the Resource Key"}),"\n",(0,i.jsxs)(n.p,{children:["Retrieve the resource key from the model by calling the ",(0,i.jsx)(n.code,{children:"getResourceKey"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["If no ",(0,i.jsx)(n.code,{children:"resourceKey"})," is defined on the model, the ",(0,i.jsx)(n.code,{children:"getResourceKey"})," method will return the short class name of the model.\nFor instance, if no resource key is defined for ",(0,i.jsx)(n.code,{children:"App\\Containers\\AppSection\\User\\Models\\User::class"}),",\nthe default resource key will be ",(0,i.jsx)(n.code,{children:"User"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"transformer-example",children:"Transformer Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class UserTransformer extends ParentTransformer\n{\n    // ...\n    public function transform(User $user)\n    {\n        return [\n            'object' => $user->getResourceKey(), // <-- here\n            'id' => $user->getHashedKey(),\n            'name' => $user->name,\n            // ...\n        ];\n    }\n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"response-example",children:"Response Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "object": "User", // <-- ResourceKey\n    "id": "XbPW7awNkzl83LD6",\n    "name": "Mohammad Alavi"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"helper-methods",children:"Helper Methods"}),"\n",(0,i.jsx)(n.h3,{id:"nullableitem",children:"nullableItem"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"nullableItem"})," method returns an item if the model has a specific relationship, otherwise, it returns ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use League\\Fractal\\Resource\\Item;\nuse League\\Fractal\\Resource\\Primitive;\n\npublic function includeRelation(Model $model): Primitive|Item\n{\n    return $this->nullableItem($model->relation, new RelationTransformer();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"$model->relation"})," is not null (meaning it has a related model),\nthe method returns an item formatted using the specified transformer.\nOtherwise, it returns ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"nullableItem"})," method is a shortcut for the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use League\\Fractal\\Resource\\Item;\nuse League\\Fractal\\Resource\\Primitive;\n\npublic function includeRelation(Model $model): Primitive|Item\n{\n    return $model->relation ? $this->item($model->relation, new RelationTransformer()) : $this->primitive(null)\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"response-payload",children:"Response Payload"}),"\n",(0,i.jsx)(n.p,{children:"You have the flexibility to define your own custom response payload or utilize one of the supported serializers.\nSerializer classes let you switch between various output formats with minimal effect on your Transformers."}),"\n",(0,i.jsxs)(n.p,{children:["Current ",(0,i.jsx)(n.a,{href:"https://fractal.thephpleague.com/serializers/",children:"supported serializers"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"ArraySerializer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"DataArraySerializer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"JsonApiSerializer"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To modify the default Fractal serializer,\naccess the ",(0,i.jsx)(n.code,{children:"app/Ship/Configs/fractal.php"})," configuration file\nand update the ",(0,i.jsx)(n.code,{children:"default_serializer"})," setting to your preferred serializer."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, Apiato uses ",(0,i.jsx)(n.code,{children:"DataArraySerializer"}),".\nThis serializer is not to everyone\u2019s tastes, because it adds a ",(0,i.jsx)(n.code,{children:"data"})," namespace to the output.\nA very basic response of the ",(0,i.jsx)(n.code,{children:"DataArraySerializer"})," will look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "object": "User",\n    "id": "XbPW7awNkzl83LD6",\n    "name": "Mohammad Alavi"\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DataArraySerializer"})," is handy because it allows space for ",(0,i.jsx)(n.code,{children:"meta"})," data\n(like pagination, or totals) in both Items and Collections."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "data": [ ... ],\n  "meta": {\n    "include": [\n      "xxx",\n      "yyy"\n    ],\n    "custom": [],\n    "pagination": {\n      "total": 999,\n      "count": 999,\n      "per_page": 999,\n      "current_page": 999,\n      "total_pages": 999,\n      "links": {\n        "next": "http://api.apiato.test/v1/accounts?page=999"\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Further Reading",type:"info",children:(0,i.jsxs)(n.p,{children:["For more detailed information, please refer to ",(0,i.jsx)(n.a,{href:"https://fractal.thephpleague.com/transformers/",children:"Fractal"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/spatie/laravel-fractal",children:"Laravel Fractal Wrapper"})," documentations."]})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var s=r(96540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);