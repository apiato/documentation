"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9568],{95788:(e,n,t)=>{t.d(n,{Iu:()=>u,yg:()=>g});var a=t(11504);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return t?a.createElement(g,r(r({ref:n},u),{},{components:t})):a.createElement(g,r({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},58820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(45072),i=(t(11504),t(95788));const l={title:"Mails"},r=void 0,o={unversionedId:"optional-components/mails",id:"version-9.x/optional-components/mails",title:"Mails",description:"* Definition",source:"@site/versioned_docs/version-9.x/optional-components/mails.md",sourceDirName:"optional-components",slug:"/optional-components/mails",permalink:"/docs/9.x/optional-components/mails",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/mails.md",tags:[],version:"9.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1618096631,formattedLastUpdatedAt:"Apr 10, 2021",frontMatter:{title:"Mails"},sidebar:"version-9.x/docs",previous:{title:"Events",permalink:"/docs/9.x/optional-components/events"},next:{title:"Notifications",permalink:"/docs/9.x/optional-components/notifications"}},s={},p=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3},{value:"Email Templates",id:"email-templates",level:2},{value:"Configure Emails",id:"configure-emails",level:2},{value:"Queueing A Notification",id:"queueing",level:2}],u={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,i.yg)(m,(0,a.c)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#definition"},"Definition")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#principles"},"Principles")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#rules"},"Rules")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#email-templates"},"Email Templates")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#configure-emails"},"Configure Emails")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"#queueing"},"Queueing"))),(0,i.yg)("h3",{id:"definition"},"Definition"),(0,i.yg)("p",null,"The Mail component allows you to describe an email and send it whenever needed. "),(0,i.yg)("p",null,"For more details refer to this ",(0,i.yg)("a",{parentName:"p",href:"https://laravel.com/docs/mail"},"link"),"."),(0,i.yg)("h3",{id:"principles"},"Principles"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Containers MAY or MAY NOT have one or more Mail.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Ship may contain general Mails."))),(0,i.yg)("h3",{id:"rules"},"Rules"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"All Notifications MUST extend from ",(0,i.yg)("inlineCode",{parentName:"li"},"App\\Ship\\Parents\\Mails\\Mail"),"."),(0,i.yg)("li",{parentName:"ul"},"Email Templates must be placed inside the Mail directory in a Templates directory ",(0,i.yg)("inlineCode",{parentName:"li"},"app/Containers/{container}/Mails/Templates"),".")),(0,i.yg)("h3",{id:"folder-structure"},"Folder Structure"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"}," - app\n    - Containers\n        - {container-name}\n            - Mails\n                - UserRegisteredMail.php\n                - ...\n                - Templates\n                    - user-registered.blade.php\n                    - ...\n    - Ship\n        - Mails\n            - SomeMail.php\n            - ...\n            - Templates\n                - some-template.blade.php\n                - ...\n")),(0,i.yg)("h3",{id:"code-samples"},"Code Samples"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Example: a simple Mail")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\User\\Mails;\n\nuse App\\Containers\\User\\Models\\User;\nuse Illuminate\\Bus\\Queueable;\nuse App\\Ship\\Parents\\Mails\\Mail;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass UserRegisteredMail extends Mail implements ShouldQueue\n{\n    use Queueable;\n\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function build()\n    {\n        return $this->view('user::user-registered')\n            ->to($this->user->email, $this->user->name)\n            ->with([\n                'name' => $this->user->name,\n            ]);\n    }\n}\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Usage from an Action:")),(0,i.yg)("p",null,"Notifications can be sent from Actions or Tasks using the ",(0,i.yg)("inlineCode",{parentName:"p"},"Mail")," Facade."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"Mail::send(new UserRegisteredMail($user));\n")),(0,i.yg)("h2",{id:"email-templates"},"Email Templates"),(0,i.yg)("p",null,"Templates should be placed inside a folder ",(0,i.yg)("inlineCode",{parentName:"p"},"Templates")," inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"Mail")," folder."),(0,i.yg)("p",null,"To access a Mail template ",(0,i.yg)("em",{parentName:"p"},"(same like accessing a web view)")," you must call the container name then the view name.   "),(0,i.yg)("p",null,"In the example below we're using the ",(0,i.yg)("inlineCode",{parentName:"p"},"user-registered.blade.php")," template in the ",(0,i.yg)("strong",{parentName:"p"},"User")," Container."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"$this->view('user::user-registered')\n")),(0,i.yg)("h2",{id:"configure-emails"},"Configure Emails"),(0,i.yg)("p",null,"Open the ",(0,i.yg)("inlineCode",{parentName:"p"},".env")," file and set the From mail and address, this will be used globally whenever the ",(0,i.yg)("inlineCode",{parentName:"p"},"from")," function is not called in the Mail. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-markdown"},'MAIL_FROM_ADDRESS=test@test.test\nMAIL_FROM_NAME="apiato"\n')),(0,i.yg)("p",null,"To use different email address in some classes add ",(0,i.yg)("inlineCode",{parentName:"p"},"->to($this->email, $this->name)")," to the ",(0,i.yg)("inlineCode",{parentName:"p"},"build")," function in your Mail class. "),(0,i.yg)("p",null,"By default Apiato is configured to use Log Driver ",(0,i.yg)("inlineCode",{parentName:"p"},"MAIL_DRIVER=log"),", you can change that from the ",(0,i.yg)("inlineCode",{parentName:"p"},".env")," file."),(0,i.yg)("h2",{id:"queueing"},"Queueing A Notification"),(0,i.yg)("p",null,"To queue a notification you should use ",(0,i.yg)("inlineCode",{parentName:"p"},"Illuminate\\Bus\\Queueable")," and implement ",(0,i.yg)("inlineCode",{parentName:"p"},"Illuminate\\Contracts\\Queue\\ShouldQueue"),"."))}c.isMDXComponent=!0}}]);