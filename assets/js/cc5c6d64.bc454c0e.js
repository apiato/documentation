"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[681],{96205:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"miscellaneous/magical-call","title":"Magical Call","description":"- The Magical Call","source":"@site/versioned_docs/version-9.x/miscellaneous/magical-call.md","sourceDirName":"miscellaneous","slug":"/miscellaneous/magical-call","permalink":"/docs/9.x/miscellaneous/magical-call","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/miscellaneous/magical-call.md","tags":[],"version":"9.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1618096631000,"frontMatter":{"title":"Magical Call"},"sidebar":"docs","previous":{"title":"Values","permalink":"/docs/9.x/optional-components/values"},"next":{"title":"Tests Helpers","permalink":"/docs/9.x/miscellaneous/tests-helpers"}}');var i=s(74848),t=s(28453);const l={title:"Magical Call"},r=void 0,o={},c=[{value:"The Magical Call",id:"the-magical-call",level:2},{value:"Usage options",id:"usage-options",level:3},{value:"Basic Usage",id:"basic-usage",level:5},{value:"Passing arguments to the <code>run</code> function",id:"passing-arguments-to-the-run-function",level:5},{value:"Calling other functions before calling the <code>run</code>",id:"calling-other-functions-before-the-run",level:5},{value:"Calling other functions and pass them arguments before calling the <code>run</code>",id:"calling-other-functions-and-pass-them-arguments",level:5},{value:"Transactional Magical Call",id:"transactional-call",level:2},{value:"Use case example",id:"use-case-example",level:2},{value:"The ListUsersTask class",id:"the-list-users-task-class",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#the-magical-call",children:"The Magical Call"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#usage-options",children:"Usage options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-usage",children:"Basic Usage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#passing-arguments-to-the-run-function",children:"Passing arguments to the run function"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#calling-other-functions-before-the-run",children:"Calling other functions before the run"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#calling-other-functions-and-pass-them-arguments",children:"Calling other functions and pass them arguments:"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#transactional-call",children:"Transactional Magical Call"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#use-case-example",children:"Use case example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#the-list-users-task-class",children:"The ListUsersTask class:"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-magical-call",children:"The Magical Call"}),"\n",(0,i.jsxs)(n.p,{children:["This magical function allows you to call any Action or Task ",(0,i.jsx)(n.code,{children:"run"})," function, from anywhere. Using the ",(0,i.jsx)(n.code,{children:"Apiato::call()"})," Facade."]}),"\n",(0,i.jsxs)(n.p,{children:["The function ",(0,i.jsx)(n.code,{children:"call"})," is mainly used for calling Apiato ",(0,i.jsx)(n.code,{children:"Actions"})," from ",(0,i.jsx)(n.code,{children:"Controllers"})," and for calling Apiato ",(0,i.jsx)(n.code,{children:"Tasks"}),"\nfrom ",(0,i.jsx)(n.code,{children:"Actions"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Each Action knows which UI called it, using ",(0,i.jsx)(n.code,{children:"$this->getUI()"}),", this is useful for handling the same Action differently\nbased on the UI type (Web or API). This will work when calling the Action from Controllers and Commands using the\nmagical ",(0,i.jsx)(n.code,{children:"call()"})," function."]}),"\n",(0,i.jsx)(n.h3,{id:"usage-options",children:"Usage options"}),"\n",(0,i.jsxs)(n.p,{children:["In the first argument you can pass the class full name, as follows ",(0,i.jsx)(n.code,{children:"App\\Containers\\User\\Tasks\\CreateUserTask::class"}),",\nor you can pass the container name and class name, as follows ",(0,i.jsx)(n.code,{children:"User@CreateUserTask"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It is highly recommended to use Apiato caller style ",(0,i.jsx)(n.code,{children:"containerName@className"})," as it helps to remove direct\ndependencies between containers. The function will verify the Container exist before calling the function and inform\nthe user to install Container if not exist."]}),"\n",(0,i.jsxs)(n.p,{children:['Note: When a class is directly called using his full name, a warning will be logged informing you to use the\n"apiato caller style". This info, however, can be disabled by changing the flag\n',(0,i.jsx)(n.code,{children:"apiato.logging.log-wrong-apiato-caller-style"})," in the ",(0,i.jsx)(n.code,{children:"Ship/Configs/apiato.php"})," file accordingly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'<?php\n\n// Call "AssignUserToRoleTask" Task from the "Authorization" Container using the apiato caller style\nApiato::call(\'Authorization@AssignUserToRoleTask\');\n\n// Call "AssignUserToRoleTask" Task from the "Authorization" Container using class full name.\n// This will cause to add an INFO entry to the log file!\nApiato::call(\\App\\Containers\\Authorization\\Tasks\\AssignUserToRoleTask::class);\n'})}),"\n",(0,i.jsx)(n.h5,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$foo = \\Apiato\\Core\\Foundation\\Facades\\Apiato::call('Container@ActionOrTask');\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["From Controllers and Actions you can use the ",(0,i.jsx)(n.code,{children:"$this->call('Container@ActionOrTask')"})," instead of the Facade, but it's not recommended."]}),"\n",(0,i.jsxs)(n.li,{children:["The magical ",(0,i.jsx)(n.code,{children:"call"})," function accepts the class full namespace (",(0,i.jsx)(n.code,{children:"\\App\\Containers\\User\\Tasks\\GetAllUsersTask::class"}),"), and Apiato caller style (",(0,i.jsx)(n.code,{children:"Containers@GetAllUsersTask"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["There is also a ",(0,i.jsx)(n.code,{children:"transactionalCall()"})," method available, that wraps everything in a ",(0,i.jsx)(n.code,{children:"DB::Transaction"})," (see below)."]}),"\n"]}),"\n",(0,i.jsxs)(n.h5,{id:"passing-arguments-to-the-run-function",children:["Passing arguments to the ",(0,i.jsx)(n.code,{children:"run"})," function"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$foo = Apiato::call('Container@ActionOrTask', [$runArgument1, $runArgument2, $runArgument3]);\n"})}),"\n",(0,i.jsxs)(n.h5,{id:"calling-other-functions-before-the-run",children:["Calling other functions before calling the ",(0,i.jsx)(n.code,{children:"run"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"$foo = Apiato::call('Container@ActionOrTask', [$runArgument], ['otherFunction1', 'otherFunction2']);\n"})}),"\n",(0,i.jsxs)(n.h5,{id:"calling-other-functions-and-pass-them-arguments",children:["Calling other functions and pass them arguments before calling the ",(0,i.jsx)(n.code,{children:"run"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n$foo = Apiato::call('Container@ActionOrTask', [$runArgument], [\n    [\n       'function1' => ['function1-argument1', 'function1-argument2']\n    ],\n    [\n       'function2' => ['function2-argument1']\n    ],\n]);\n\n$foo = Apiato::call('Container@ActionOrTask', [$runArgument], [\n    'function-without-argument',\n    [\n      'function1' => ['function1-argument1', 'function1-argument2']\n    ],\n]);\n\n$foo = Apiato::call('Container@ActionOrTask', [], [\n    'function-without-argument',\n    [\n      'function1' => ['function1-argument1', 'function1-argument2']\n    ],\n    'another-function-without-argument',\n    [\n      'function2' => ['function2-argument1', 'function2-argument2', 'function2-argument3']\n    ],\n]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"transactional-call",children:"Transactional Magical Call"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes, you want to wrap a call into one ",(0,i.jsx)(n.code,{children:"Database Transaction"})," (see\n",(0,i.jsx)(n.a,{href:"https://laravel.com/docs/master/database#database-transactions",children:"Laravel Documentation"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Consider the following example: You want to create a new ",(0,i.jsx)(n.code,{children:"Team"})," and automatically assign yourself (i.e., your own\n",(0,i.jsx)(n.code,{children:"User"}),") to this newly created ",(0,i.jsx)(n.code,{children:"Team"}),". Your ",(0,i.jsx)(n.code,{children:"CreateTeamAction"})," may call a dedicated ",(0,i.jsx)(n.code,{children:"CreateTeamTask"})," and a\n",(0,i.jsx)(n.code,{children:"AssignMemberToTeamTask"})," afterwards."]}),"\n",(0,i.jsxs)(n.p,{children:["However, if the ",(0,i.jsx)(n.code,{children:"AssignMemberToTeamTask"}),' fails, for unknown reasons, you may want to "rollback" (i.e., remove) the\nnewly created ',(0,i.jsx)(n.code,{children:"Team"})," from the database in order to keep the database in a valid state."]}),"\n",(0,i.jsxs)(n.p,{children:["That's where ",(0,i.jsx)(n.code,{children:"DB::transactions"})," comes into play!"]}),"\n",(0,i.jsxs)(n.p,{children:["Apiato provides a ",(0,i.jsx)(n.code,{children:"transactionalCall($class, $params, $extraMethods)"})," method with the similar parameters as already\nknown from the  ",(0,i.jsx)(n.code,{children:"call()"})," method. Internally, this method calls this ",(0,i.jsx)(n.code,{children:"call()"})," method anyways, but wraps it into a\n",(0,i.jsx)(n.code,{children:"DB::transaction"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If any ",(0,i.jsx)(n.code,{children:"Exception"})," occurs during the execution of the ",(0,i.jsx)(n.code,{children:"$class"})," to be called, everything done in this context is\nautomatically rolled-back from the database. However, respective operations on the file system (e.g., you may also\nhave uploaded a profile picture for this ",(0,i.jsx)(n.code,{children:"Team"})," already that needs to be removed in this case) need to be performed\nmanually!"]}),"\n",(0,i.jsxs)(n.p,{children:["Typically, you may want to use the ",(0,i.jsx)(n.code,{children:"transactionalCall()"})," on the ",(0,i.jsx)(n.code,{children:"Controller"})," level!"]}),"\n",(0,i.jsx)(n.h2,{id:"use-case-example",children:"Use case example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nreturn Apiato::call('User@ListUsersTask', [], ['ordered']);\n// can be called this way as well Apiato::call(ListUsersTask::class, [], ['ordered']);\n\nreturn Apiato::call('User@ListUsersTask', [], ['ordered', 'clients']);\n\nreturn Apiato::call('User@ListUsersTask', [], ['admins']);\n\nreturn Apiato::call('User@ListUsersTask', [], ['admins', ['roles' => ['manager', 'employee']]]);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-list-users-task-class",children:"The ListUsersTask class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Containers\\User\\Tasks;\n\nuse App\\Containers\\User\\Data\\Criterias\\AdminsCriteria;\nuse App\\Containers\\User\\Data\\Criterias\\ClientsCriteria;\nuse App\\Containers\\User\\Data\\Criterias\\RoleCriteria;\nuse App\\Containers\\User\\Data\\Repositories\\UserRepository;\nuse App\\Ship\\Criterias\\Eloquent\\OrderByCreationDateDescendingCriteria;\nuse App\\Ship\\Parents\\Tasks\\Task;\n\nclass ListUsersTask extends Task\n{\n    private $userRepository;\n\n    public function __construct(UserRepository $userRepository)\n    {\n        $this->userRepository = $userRepository;\n    }\n\n    public function run()\n    {\n        return $this->userRepository->paginate();\n    }\n\n    public function clients()\n    {\n        $this->userRepository->pushCriteria(new ClientsCriteria());\n    }\n\n    public function admins()\n    {\n        $this->userRepository->pushCriteria(new AdminsCriteria());\n    }\n\n    public function ordered()\n    {\n        $this->userRepository->pushCriteria(new OrderByCreationDateDescendingCriteria());\n    }\n\n    public function withRole($roles)\n    {\n        $this->userRepository->pushCriteria(new RoleCriteria($roles));\n    }\n\n}\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var a=s(96540);const i={},t=a.createContext(i);function l(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);