"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3164],{95788:(e,n,r)=>{r.d(n,{Iu:()=>p,yg:()=>f});var t=r(11504);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?t.createElement(f,s(s({ref:n},p),{},{components:r})):t.createElement(f,s({ref:n},p))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},18788:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=r(45072),a=(r(11504),r(95788));const o={title:"Factories"},s=void 0,i={unversionedId:"optional-components/factories",id:"version-9.x/optional-components/factories",title:"Factories",description:"* Definition",source:"@site/versioned_docs/version-9.x/optional-components/factories.md",sourceDirName:"optional-components",slug:"/optional-components/factories",permalink:"/docs/9.x/optional-components/factories",draft:!1,editUrl:"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/factories.md",tags:[],version:"9.x",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1618096631,formattedLastUpdatedAt:"Apr 10, 2021",frontMatter:{title:"Factories"},sidebar:"version-9.x/docs",previous:{title:"Seeders",permalink:"/docs/9.x/optional-components/seeders"},next:{title:"Middlewares",permalink:"/docs/9.x/optional-components/middlewares"}},l={},c=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...r}=e;return(0,a.yg)(u,(0,t.c)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#definition"},"Definition")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#principles"},"Principles")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#rules"},"Rules")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#code-samples"},"Code Samples"))),(0,a.yg)("h3",{id:"definition"},"Definition"),(0,a.yg)("p",null,"Factories (are a short name for Models Factories)."),(0,a.yg)("p",null,"Factories are used to generate some fake data with the help of Faker to be used for testing purposes."),(0,a.yg)("p",null,"Factories are mainly used from Tests."),(0,a.yg)("h3",{id:"principles"},"Principles"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Factories SHOULD be created in the Containers.")),(0,a.yg)("h3",{id:"rules"},"Rules"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A Factory is just a plain PHP script. ",(0,a.yg)("em",{parentName:"li"},"(No classes or namespaces required)"))),(0,a.yg)("h3",{id:"folder-structure"},"Folder Structure"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"}," - app\n    - Containers\n        - {container-name}\n             - Data\n                - Factories\n                    - UserFactory.php\n                    - ...\n")),(0,a.yg)("h3",{id:"code-samples"},"Code Samples"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"A User Model Factory:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// User\n$factory->define(App\\Containers\\User\\Models\\User::class, function (Faker\\Generator $faker) {\n    return [\n        'name'     => $faker->name,\n        'email'    => $faker->email,\n        'password' => bcrypt(str_random(10)),\n    ];\n});\n\n// ...\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Usage from ",(0,a.yg)("inlineCode",{parentName:"strong"},"Tests")," or anywhere else:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// creating 4 users\nfactory(User::class, 4)->create();\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Usage with relationships:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$countries = Country::all();\n\n// creating 3 rewards and attaching country relation to them\n$rewards = factory(Reward::class, 3)->make()->each(function ($reward) use ($countries) {\n    $reward->save();\n    $reward->countries()->attach([$countries->random(1)->id, $countries->random(1)->id]);\n    $reward->save();\n});\n")),(0,a.yg)("p",null,"Use make instance of create and pass any data any way, then save after establishing the relations."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Usage while overriding some values:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// creating single Offer and setting a user id\n$offer = factory(Offer::class)->make();\n$offer->user_id = $user->id;\n$offer->save();\n\n// ANOTHER EXAMPLE:\n\n// creating multiple Accounts\nfactory(Account::class, 3)->make()->each(function ($account) use ($user) {\n    $account->user_id = $user->id;\n    $account->save();\n});\n")),(0,a.yg)("p",null,"For more information about the Models Factories read ",(0,a.yg)("a",{parentName:"p",href:"https://laravel.com/docs/master/testing#model-factories"},"this"),"."))}d.isMDXComponent=!0}}]);