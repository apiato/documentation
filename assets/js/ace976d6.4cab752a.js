"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[20456],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},80844:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"optional-components/factories","title":"Factories","description":"* Definition","source":"@site/versioned_docs/version-9.x/optional-components/factories.md","sourceDirName":"optional-components","slug":"/optional-components/factories","permalink":"/docs/9.x/optional-components/factories","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/optional-components/factories.md","tags":[],"version":"9.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1618096631000,"frontMatter":{"title":"Factories"},"sidebar":"docs","previous":{"title":"Seeders","permalink":"/docs/9.x/optional-components/seeders"},"next":{"title":"Middlewares","permalink":"/docs/9.x/optional-components/middlewares"}}');var t=s(74848),i=s(28453);const a={title:"Factories"},o=void 0,c={},l=[{value:"Definition",id:"definition",level:3},{value:"Principles",id:"principles",level:3},{value:"Rules",id:"rules",level:3},{value:"Folder Structure",id:"folder-structure",level:3},{value:"Code Samples",id:"code-samples",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#definition",children:"Definition"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#principles",children:"Principles"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#rules",children:"Rules"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#folder-structure",children:"Folder Structure"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#code-samples",children:"Code Samples"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,t.jsx)(n.p,{children:"Factories (are a short name for Models Factories)."}),"\n",(0,t.jsx)(n.p,{children:"Factories are used to generate some fake data with the help of Faker to be used for testing purposes."}),"\n",(0,t.jsx)(n.p,{children:"Factories are mainly used from Tests."}),"\n",(0,t.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Factories SHOULD be created in the Containers."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"rules",children:"Rules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A Factory is just a plain PHP script. ",(0,t.jsx)(n.em,{children:"(No classes or namespaces required)"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"folder-structure",children:"Folder Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:" - app\n    - Containers\n        - {container-name}\n             - Data\n                - Factories\n                    - UserFactory.php\n                    - ...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"code-samples",children:"Code Samples"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"A User Model Factory:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\n// User\n$factory->define(App\\Containers\\User\\Models\\User::class, function (Faker\\Generator $faker) {\n    return [\n        'name'     => $faker->name,\n        'email'    => $faker->email,\n        'password' => bcrypt(str_random(10)),\n    ];\n});\n\n// ...\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Usage from ",(0,t.jsx)(n.code,{children:"Tests"})," or anywhere else:"]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\n// creating 4 users\nfactory(User::class, 4)->create();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage with relationships:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\n$countries = Country::all();\n\n// creating 3 rewards and attaching country relation to them\n$rewards = factory(Reward::class, 3)->make()->each(function ($reward) use ($countries) {\n    $reward->save();\n    $reward->countries()->attach([$countries->random(1)->id, $countries->random(1)->id]);\n    $reward->save();\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Use make instance of create and pass any data any way, then save after establishing the relations."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage while overriding some values:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\n\n// creating single Offer and setting a user id\n$offer = factory(Offer::class)->make();\n$offer->user_id = $user->id;\n$offer->save();\n\n// ANOTHER EXAMPLE:\n\n// creating multiple Accounts\nfactory(Account::class, 3)->make()->each(function ($account) use ($user) {\n    $account->user_id = $user->id;\n    $account->save();\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more information about the Models Factories read ",(0,t.jsx)(n.a,{href:"https://laravel.com/docs/master/testing#model-factories",children:"this"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);