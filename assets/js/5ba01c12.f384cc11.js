"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[6108],{18793:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core-features/authorization","title":"Authorization","description":"- How it works","source":"@site/versioned_docs/version-9.x/core-features/authorization.md","sourceDirName":"core-features","slug":"/core-features/authorization","permalink":"/docs/9.x/core-features/authorization","draft":false,"unlisted":false,"editUrl":"https://github.com/apiato/documentation/tree/master/versioned_docs/version-9.x/core-features/authorization.md","tags":[],"version":"9.x","lastUpdatedBy":"Moslem Deris","lastUpdatedAt":1618748235000,"frontMatter":{"title":"Authorization"},"sidebar":"docs","previous":{"title":"Authentication","permalink":"/docs/9.x/core-features/authentication"},"next":{"title":"User Registration","permalink":"/docs/9.x/core-features/user-registration"}}');var r=n(74848),t=n(28453);const o={title:"Authorization"},a=void 0,l={},d=[{value:"How it works",id:"how-it-works",level:2},{value:"Responses",id:"responses",level:2},{value:"Assign Roles &amp; Permission to the Testing User",id:"assign-roles-permission-to-the-testing-user",level:2},{value:"Seeding some users (Admins)",id:"seeding-some-users-admins",level:2},{value:"Roles &amp; Permissions guards",id:"roles-permissions-guards",level:2},{value:"Permissions Inheriting with Levels",id:"permissions-inheriting-with-levels",level:2}];function c(e){const s={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#how-it-works",children:"How it works"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#responses",children:"Responses"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#assign-roles-permission-to-the-testing-user",children:"Assign Roles & Permission to the Testing User"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#seeding-some-users-admins",children:"Seeding some users (Admins)"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#roles-permissions-guards",children:"Roles & Permissions guards"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#permissions-inheriting-with-levels",children:"Permissions Inheriting with Levels"})}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Apiato provides a Role-Based Access Control (RBAC) from its Authorization Container."}),"\n",(0,r.jsxs)(s.p,{children:["Behind the scenes apiato is using the ",(0,r.jsx)(s.a,{href:"https://laravel.com/docs/master/authorization",children:"Laravel's authorization"})," functionality that was introduced in version 5.1.11 with the helper package ",(0,r.jsx)(s.a,{href:"https://github.com/spatie/laravel-permission",children:"laravel-permission"}),". So you can always refer to the correspond documentation for more information."]}),"\n",(0,r.jsx)(s.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,r.jsx)(s.p,{children:"Authorization in apiato is very simple and easy."}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["First you need to make sure you have a seeded Super Admin, an ",(0,r.jsx)(s.code,{children:"admin"})," role and optionally your custom permissions (usually permissions should be statically created in the code). ",(0,r.jsx)(s.strong,{children:"apiato"})," provides most of these stuff for you, you can find the code at any container ",(0,r.jsx)(s.code,{children:".../Data/Seeders/*"})," directory ",(0,r.jsx)(s.em,{children:"(example: Authentication Container)"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Second create Roles, and attach some permissions to the roles."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Now start creating users (or use existing users), to assign them to the new created Roles."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.em,{children:"That should be done from your custom admin panel, which can consume the default provided Roles & Permissions API endpoints (Create Role, Assign User to Roles, List all Permission...)."})}),"\n",(0,r.jsxs)(s.ol,{start:"3",children:["\n",(0,r.jsx)(s.li,{children:"Finally, you need to protect your endpoints by Permissions (or/and Roles). The right place to do that is the Requests class."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Example protecting the (delete user) endpoint with ",(0,r.jsx)(s.code,{children:"delete-users"})," permission:"]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass DeleteUserRequest extends Request\n{\n\n    /**\n     * Define which Roles and/or Permissions has access to this request.\n     *\n     * @var  array\n     */\n    protected $access = [\n        'permissions' => 'delete-users', // Accepts Array and String ['delete-users', 'create-users'],\n        'roles'       => '',\n    ];\n\n\n    /**\n     * @return  bool\n     */\n    public function authorize()\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n        ]);\n    }\n}\n\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["For detailed explanation of this example, please visit the ",(0,r.jsx)(s.a,{href:".././main-components/requests",children:"Requests"})," Page."]})}),"\n",(0,r.jsx)(s.h2,{id:"responses",children:"Responses"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Authorization failed JSON response:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n  "errors": "You have no access to this resource!",\n  "status_code": 403,\n  "message": "This action is unauthorized."\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"assign-roles-permission-to-the-testing-user",children:"Assign Roles & Permission to the Testing User"}),"\n",(0,r.jsxs)(s.p,{children:["You will need to set ",(0,r.jsx)(s.code,{children:"$access"})," property in your test class, check out the ",(0,r.jsx)(s.a,{href:".././miscellaneous/tests-helpers",children:"Tests Helpers"})," page for more details."]}),"\n",(0,r.jsx)(s.h2,{id:"seeding-some-users-admins",children:"Seeding some users (Admins)"}),"\n",(0,r.jsxs)(s.p,{children:["By default, ",(0,r.jsx)(s.strong,{children:"apiato"})," comes with a ",(0,r.jsx)(s.code,{children:"Super Admin"})," with Access to Admin Dashboard."]}),"\n",(0,r.jsx)(s.p,{children:"This Super Admin Credentials are:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["email: ",(0,r.jsx)(s.a,{href:"mailto:admin@admin.com",children:"admin@admin.com"})]}),"\n",(0,r.jsx)(s.li,{children:"password: admin"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["This Admin seeded by ",(0,r.jsx)(s.code,{children:"app/Containers/Authorization/Data/Seeders/AuthorizationDefaultUsersSeeder_3.php"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The Default Super User, has a default role ",(0,r.jsx)(s.code,{children:"admin"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"admin"})," default role ",(0,r.jsx)(s.strong,{children:"has no permissions given to it"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["To give permissions to the ",(0,r.jsx)(s.code,{children:"admin"})," role (or any other role), you can use the dedicated endpoints (from your custom Admin Interface) or use this command ",(0,r.jsx)(s.code,{children:"php artisan apiato:permissions:toRole admin"})," to give it all the permissions in the system."]}),"\n",(0,r.jsxs)(s.p,{children:["Checkout each container ",(0,r.jsx)(s.strong,{children:"Seeders"})," directory ",(0,r.jsx)(s.code,{children:"app/Containers/{container-name}/Data/Seeders/"}),", to edit the default ",(0,r.jsx)(s.strong,{children:"Users"}),", ",(0,r.jsx)(s.strong,{children:"Roles"})," and ",(0,r.jsx)(s.strong,{children:"Permissions"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"roles-permissions-guards",children:"Roles & Permissions guards"}),"\n",(0,r.jsxs)(s.p,{children:["By default, Apiato uses a single guard called ",(0,r.jsx)(s.code,{children:"web"})," for all it's roles and permissions, you can add/edit this behavior and support multiple guards at any time. Refer to the ",(0,r.jsx)(s.a,{href:"https://github.com/spatie/laravel-permission#using-multiple-guards",children:"laravel-permission"})," package for more details."]}),"\n",(0,r.jsx)(s.h2,{id:"permissions-inheriting-with-levels",children:"Permissions Inheriting with Levels"}),"\n",(0,r.jsxs)(s.p,{children:["When you create a role you can set an optional parameter, called ",(0,r.jsx)(s.code,{children:"level"}),", which is set to ",(0,r.jsx)(s.code,{children:"0"})," by default,\nThe default seeded ",(0,r.jsx)(s.code,{children:"admin"})," role has it set to ",(0,r.jsx)(s.code,{children:"999"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"Level allows inheriting permissions.\nRole with higher level is inheriting permission from roles with lower level."}),"\n",(0,r.jsx)(s.p,{children:"Below is a nice example of how it works:"}),"\n",(0,r.jsx)(s.p,{children:"You have three roles: user, moderator and admin.\nUser has a permission to read articles, moderator can manage comments and admin can create articles.\nUser has a level 1, moderator level 2 and admin level 3.\nIt means, moderator and administrator has also permission to read articles, but administrator can manage comments as well."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-php",children:"if ($user->getRoleLevel() > 10) {\n    //\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["If user has multiple roles, the ",(0,r.jsx)(s.code,{children:"getRoleLevel()"})," method returns the highest one."]}),"\n",(0,r.jsx)(s.p,{children:"If you don't need the permissions inheriting feature, simply ignore the optional level parameter when creating roles."})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var i=n(96540);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);