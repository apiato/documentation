"use strict";(self.webpackChunkapiato_documentation=self.webpackChunkapiato_documentation||[]).push([[17546],{52603:t=>{t.exports=JSON.parse('{"tag":{"label":"architecture","permalink":"/docs/tags/architecture","allTagsPath":"/docs/tags","count":4,"items":[{"id":"architecture-concepts/readme","title":"Architecture Concepts","description":"Apiato uses the Porto Software Architectural Pattern","permalink":"/docs/architecture-concepts/"},{"id":"architecture-concepts/components","title":"Components","description":"In the Container layer of Porto,","permalink":"/docs/architecture-concepts/components"},{"id":"architecture-concepts/container","title":"Containers","description":"Containers are at the core of Apiato.","permalink":"/docs/architecture-concepts/container"},{"id":"architecture-concepts/porto","title":"Porto SAP","description":"Apiato is built on the Porto SAP architectural pattern, a design specifically crafted to enhance scalability, maintainability, and reusability. By adopting Porto, Apiato provides a structured, modular way to organize code, which helps developers scale from a simple monolithic setup to complex microservices as the application grows.","permalink":"/docs/architecture-concepts/porto"}],"unlisted":false}}')}}]);